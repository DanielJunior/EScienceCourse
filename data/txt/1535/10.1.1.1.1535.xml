<document id="10.1.1.1.1535"><title src="SVM HeaderParse 0.1">A sub-quadratic algorithm for conjunctive and disjunctive</title><abstract src="SVM HeaderParse 0.1">We present an algorithm for conjunctive and disjunctive Boolean equation systems (BESs), which arise frequently in the verification and analysis of finite state concurrent systems. In contrast to the previously best known O(e 2) time solutions, our algorithm computes the solution of such a fixpoint equation system with size e and alternation depth d in O(e log d) time. 1</abstract><keywords></keywords><authors><author id="4276"><name src="SVM HeaderParse 0.1">Jan Friso Groote</name><address src="SVM HeaderParse 0.1">of Technology, P.O. Box 513, 5600 MB Eindhoven, The Netherlands</address><email src="SVM HeaderParse 0.1">J.F.Groote@tue.nl</email><order>1</order></author><author id="4277"><name src="SVM HeaderParse 0.1">Misa Keinänen</name><address src="SVM HeaderParse 0.1">of Technology, P.O. Box 513, 5600 MB Eindhoven, The Netherlands</address><email src="SVM HeaderParse 0.1">Misa.Keinanen@hut.fi</email><order>2</order></author></authors><citations src="ParsCit 1.0"><citation id="28786"><authors>H R Andersen</authors><title>Model checking and boolean graphs</title><venue>Theoretical Computer Science</venue><venType>JOURNAL</venType><year>1994</year><pages>3--30</pages><volume>126</volume><raw>H.R. Andersen. Model checking and boolean graphs. Theoretical Computer Science, 126 (1994) 3-30.</raw><contexts><context>n O(e 2 ) time solutions, our algorithm computes the solution of such a fixpoint equation system with size e and alternation depth d in O(e log d) time. 1 Introduction A Boolean Equation System (BES) [1, 5, 6] is a sequence of boolean equations with minimal and maximal fixpoints. It gives a useful framework for the verification of finite state concurrent systems. This is due to the fact that many interesti</context></contexts></citation><citation id="28787"><authors>J F Groote,M K Keinänen</authors><title>Solving Disjunctive/Conjunctive Boolean Equation Systems with Alternating Fixed Points</title><venue>Proc. 10th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS’2004), volume 2988 of Lecture Notes in Computer Science</venue><venType>CONFERENCE</venType><year>2004</year><pages>436--450</pages><editors>In K. Jensen and A. Podelski, editors</editors><publisher>Springer</publisher><raw>J.F. Groote and M.K. Keinänen. Solving Disjunctive/Conjunctive Boolean Equation Systems with Alternating Fixed Points. In K. Jensen and A. Podelski, editors, Proc. 10th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS’2004), volume 2988 of Lecture Notes in Computer Science, pages 436-450. Springer, 2004.</raw><contexts><context>TEMS 2 is therefore interesting to develop specific resolution techniques for these particular fragments. All previous algorithms for solving conjunctive and disjunctive classes, including those from [2, 5], take at least quadratic time in the size of a boolean equation system in the worst case. For large boolean equations which are typically encountered in model checking and preorder/equivalence checki</context><context>i. Definition 3.2. Let G = (V, E, ℓ) be a dependency graph and k ∈ V . We define the graph G↾k = (V, E↾k, ℓ) by taking • E↾k = {〈i, j〉 ∈ E | i ≥ k and j ≥ k}. The following essential lemma comes from [2]. Lemma 3.3. Let GE = (V, E, ℓ) be the dependency graph of a disjunctive Boolean equation system E. Let xi be any variable in E and let valuation v be the solution of E. Then the following are equival</context><context>each other. Using for instance Lemma 3.22 of [5] a Boolean equation system can be reordered such that our notion of alternation depth and the notion of [5] coincide. A note about the open question in [2]. In [2] the following open question was stated. Given a directed graph of which the vertices are ordered and labelled with either red or green. Is there a sub quadratic algorithm to determine whether</context></contexts></citation><citation id="28788"><authors>V King,O Kupferman,M Y Vardi</authors><title>On the complexity of parity word automata</title><venue>Proc. of 4th International Conference on Foundations of Software Science and Computation Structures, volume 2030 of Lecture Notes in Computer Science</venue><venType>CONFERENCE</venType><year>2001</year><pages>276--286</pages><publisher>Springer</publisher><raw>V. King, O. Kupferman and M.Y. Vardi. On the complexity of parity word automata. Proc. of 4th International Conference on Foundations of Software Science and Computation Structures, volume 2030 of Lecture Notes in Computer Science, pages 276–286. Springer, 2001.</raw><contexts><context>ated algorithms are left for future work. Our algorithm combines essentially graph theoretic techniques for finding strong components [7, 8] and hierarchical clustering [9]. King, Kupferman and Vardi [3] recently found an algorithm in the realm of parity word automata. Their algorithm is very similar to ours and also resorts to the ideas in [9]. But their algoritm has a very different purpose, namely</context><context>Our approach differs from [3] in that we can employ a special structure of boolean equation systems, called alternation depth (see Def. 2.1), and our algorithm suggests even a slight improvement over [3]. This note is organised as follows. Section 2 introduces basic notions concerning boolean systems of equations. Section 3 formalises our idea of solving disjunctive (and conjunctive respectively) sub</context></contexts></citation><citation id="28789"><authors>D Kozen</authors><title>Results on the propositional µ-calculus. Theoretical computer Science 27</title><year>1983</year><pages>333--354</pages><raw>D. Kozen. Results on the propositional µ-calculus. Theoretical computer Science 27 (1983) 333-354.</raw><contexts><context>ives a useful framework for the verification of finite state concurrent systems. This is due to the fact that many interesting properties of systems can naturally be specified in the modal µ-calculus [4]. The model checking problem says whether such a formula holds for a transition system. This problem, or more concretely a formula and a transition system, can be straightforwardly translated to a boo</context></contexts></citation><citation id="28790"><authors>A Mader</authors><title>Verification of Modal Properties using Boolean Equation Systems</title><venType>TECHREPORT</venType><year>1997</year><tech>PhD thesis, Technical</tech><raw>A. Mader. Verification of Modal Properties using Boolean Equation Systems. PhD thesis, Technical University of Munich, 1997.</raw><contexts><context>n O(e 2 ) time solutions, our algorithm computes the solution of such a fixpoint equation system with size e and alternation depth d in O(e log d) time. 1 Introduction A Boolean Equation System (BES) [1, 5, 6] is a sequence of boolean equations with minimal and maximal fixpoints. It gives a useful framework for the verification of finite state concurrent systems. This is due to the fact that many interesti</context><context>TEMS 2 is therefore interesting to develop specific resolution techniques for these particular fragments. All previous algorithms for solving conjunctive and disjunctive classes, including those from [2, 5], take at least quadratic time in the size of a boolean equation system in the worst case. For large boolean equations which are typically encountered in model checking and preorder/equivalence checki</context><context>th based on the sequential occurrences of µ’s and ν’s in a Boolean equation system. A definition of alternation depth that abstracts from the syntactical appearance can be found in Definition 3.34 of [5]. The idea is that to determine the alternation depth only chains of equations in a Boolean equation system must be followed that depend on each other. Using for instance Lemma 3.22 of [5] a Boolean e</context></contexts></citation><citation id="28791"><authors>R Mateescu</authors><title>A Generic On-the-Fly Solver for Alternation-Free Boolean Equation Systems</title><venue>In Proceedings of Conf. on Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 2619</venue><venType>CONFERENCE</venType><year>2003</year><pages>81--96</pages><publisher>Springer Verlag</publisher><raw>R. Mateescu. A Generic On-the-Fly Solver for Alternation-Free Boolean Equation Systems. In Proceedings of Conf. on Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 2619 (Springer Verlag, 2003) 81-96.</raw><contexts><context>n O(e 2 ) time solutions, our algorithm computes the solution of such a fixpoint equation system with size e and alternation depth d in O(e log d) time. 1 Introduction A Boolean Equation System (BES) [1, 5, 6] is a sequence of boolean equations with minimal and maximal fixpoints. It gives a useful framework for the verification of finite state concurrent systems. This is due to the fact that many interesti</context></contexts></citation><citation id="28792"><authors>M Sharir</authors><title>A strong-connectivity algorithm and its application in data flow analysis</title><venue>Computers and Mathematics with Applications</venue><venType>CONFERENCE</venType><year>1981</year><pages>7--1</pages><raw>M. Sharir. A strong-connectivity algorithm and its application in data flow analysis. Computers and Mathematics with Applications 7(1):67-72, 1981.</raw><contexts><context>ms, and an empirical comparison between our approach and other related algorithms are left for future work. Our algorithm combines essentially graph theoretic techniques for finding strong components [7, 8] and hierarchical clustering [9]. King, Kupferman and Vardi [3] recently found an algorithm in the realm of parity word automata. Their algorithm is very similar to ours and also resorts to the ideas </context><context>, and (b) GE contains a cycle of which the lowest index of a vertex on this cycle is j. Finding cycles in graphs can be done in linear time using any algorithm to detect strongly connected components [7, 8]. A strongly connected component (SCC) in a graph G = (V, E, ℓ) is a set of vertices W ⊆ V such that for each pair of vertices k, l ∈ W it is possible to reach l from k by following directed edges in </context></contexts></citation><citation id="28793"><authors>R E Tarjan</authors><title>Depth first search and linear graph algorithms</title><venue>SIAM Journal of Computing</venue><venType>JOURNAL</venType><year>1972</year><pages>1--2</pages><raw>R.E. Tarjan. Depth first search and linear graph algorithms. SIAM Journal of Computing. 1(2):146-160, 1972.</raw><contexts><context>ms, and an empirical comparison between our approach and other related algorithms are left for future work. Our algorithm combines essentially graph theoretic techniques for finding strong components [7, 8] and hierarchical clustering [9]. King, Kupferman and Vardi [3] recently found an algorithm in the realm of parity word automata. Their algorithm is very similar to ours and also resorts to the ideas </context><context>, and (b) GE contains a cycle of which the lowest index of a vertex on this cycle is j. Finding cycles in graphs can be done in linear time using any algorithm to detect strongly connected components [7, 8]. A strongly connected component (SCC) in a graph G = (V, E, ℓ) is a set of vertices W ⊆ V such that for each pair of vertices k, l ∈ W it is possible to reach l from k by following directed edges in </context></contexts></citation><citation id="28794"><authors>R E Tarjan</authors><title>A hierarchical clustering algorithm using strong components</title><venue>Information Processing Letters</venue><venType>CONFERENCE</venType><year>1982</year><pages>14--1</pages><raw>R.E. Tarjan. A hierarchical clustering algorithm using strong components. Information Processing Letters, 14(1):26-29, 1982.</raw><contexts><context>ween our approach and other related algorithms are left for future work. Our algorithm combines essentially graph theoretic techniques for finding strong components [7, 8] and hierarchical clustering [9]. King, Kupferman and Vardi [3] recently found an algorithm in the realm of parity word automata. Their algorithm is very similar to ours and also resorts to the ideas in [9]. But their algoritm has a</context></contexts></citation></citations><fileInfo><url>http://www.win.tue.nl/~jfg/articles/CSR-04-13.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>db0bedc43721d8c6ab3342c80a38bfa0611b5f58</sha1></checkSum></checkSums></fileInfo></document>