<document id="10.1.1.1.1515"><title src="SVM HeaderParse 0.1">Disjoint Sum of Product Minimization by Evolutionary Algorithms</title><abstract src="SVM HeaderParse 0.1">Recently, an approach has been presented to minimize Disjoint Sumof-Products (DSOPs) based on Binary Decision Diagrams (BDDs). Due to the symbolic representation of cubes for large problem instances, the method is orders of magnitude faster than previous enumerative techniques. But the quality of the approach largely depends on the variable ordering of the underlying BDD. This paper presents an Evolutionary Algorithm (EA) to optimize the DSOP representation of a given Boolean function. The EA is used to find an optimized variable ordering for the BDD representation. Then the DSOP is derived from the optimized BDD using structural and symbolic techniques. Experiments are performed to adjust the parameters of the EA. Experimental results are given to demonstrate the efficiency of the approach. 1</abstract><keywords></keywords><authors><author id="4196"><name src="SVM HeaderParse 0.1">Nicole Drechsler</name><address src="SVM HeaderParse 0.1">28359 Bremen, Germany</address><email src="SVM HeaderParse 0.1">mh@informatik.uni-bremen.de</email><order>1</order></author><author id="4197"><name src="SVM HeaderParse 0.1">Mario Hilgemeier</name><address src="SVM HeaderParse 0.1">28359 Bremen, Germany</address><email src="SVM HeaderParse 0.1">rd@informatik.uni-bremen.de</email><order>2</order></author><author id="4198"><name src="SVM HeaderParse 0.1">Görschwin Fey</name><address src="SVM HeaderParse 0.1">28359 Bremen, Germany</address><email src="SVM HeaderParse 0.1">fey@informatik.uni-bremen.de</email><order>3</order></author><author id="4199"><name src="SVM HeaderParse 0.1">Rolf Drechsler</name><address src="SVM HeaderParse 0.1">28359 Bremen, Germany</address><email src="SVM HeaderParse 0.1">nd@informatik.uni-bremen.de</email><order>4</order></author></authors><citations src="ParsCit 1.0"><citation id="28451"><authors>R E Bryant</authors><title>Graph-based algorithms for Boolean function manipulation</title><venue>IEEE Trans. on Comp</venue><venType>JOURNAL</venType><year>1986</year><volume>35</volume><raw>R.E. Bryant. Graph-based algorithms for Boolean function manipulation. IEEE Trans. on Comp., 35(8):677–691, 1986.</raw><contexts><context>s are labeled with 0 or 1 and correspond to the constant Boolean functions. The root node root(Gf ) corresponds to the function f. In the following, BDD refers to a reduced ordered BDD (as defined in [1]) and the size of a BDD is given by the number of nodes. Definition 1 A one-path in a BDD Gf = (V, E) is a path p = (v0, ..., vl−1, vl), vi ∈ V, (vi, vi+1) ∈ E with v0 = root(Gf ) and label(vl) = 1. p</context></contexts></citation><citation id="28452"><authors>R E Bryant</authors><title>Binary decision diagrams and beyond: Enabling techniques for formal verification</title><venue>In Int’l Conf. on CAD</venue><venType>CONFERENCE</venType><year>1995</year><pages>236--243</pages><raw>R.E. Bryant. Binary decision diagrams and beyond: Enabling techniques for formal verification. In Int’l Conf. on CAD, pages 236–243, 1995.</raw><contexts><context>blem. BDDs in general are an efficient data structure for representation and manipulation of Boolean functions. They are well-known and widely used in logic synthesis [16, 10] and formal verification [2, 15] of integrated circuits. BDDs are well-suited for applications in the area of logic synthesis, because the cubes in the ON-set of a Boolean function are implicitly represented in this data structure. </context></contexts></citation><citation id="28453"><authors>L Davis</authors><title>Applying adaptive algorithms to epistatic domains</title><venue>In Proceedings of IJCAI</venue><venType>CONFERENCE</venType><year>1985</year><pages>162--164</pages><raw>L. Davis. Applying adaptive algorithms to epistatic domains. In Proceedings of IJCAI, pages 162–164, 1985.</raw><contexts><context>tors and mutations for permutation problems are used. For the crossover operators two parents are selected by the method described above. For more details about the evolutionary operators we refer to [13, 3, 18, 5, 14]. Notice that a simple exchange of the parts between the cut positions (as often applied to binary encoded EA problems) is not possible, since this would often produce invalid solutions. PMX [13]: Cho</context><context>lements. Construct the children by choosing the part between the cut positions from one parent and preserve the absolute position and order of as many variables as possible from the second parent. OX [3]: Choose two cut positions randomly in the parent elements. Construct the children by choosing the part between the cut position from one parent and preserve the relative position and order of as many</context></contexts></citation><citation id="28454"><authors>L Davis</authors><title>Handbook of Genetic Algorithms. van Nostrand Reinhold</title><year>1991</year><pubAddress>New York</pubAddress><raw>L. Davis. Handbook of Genetic Algorithms. van Nostrand Reinhold, New York, 1991.</raw><contexts><context>iable ordering given by the individual, then the number of reduced one-paths are counted [11]. The selection is performed by roulette wheel selection and we also make use of steady-state reproduction [4]: The best individuals of the old population are included in the new one of equal size. This strategy guarantees that the best element never gets lost and a fast convergence is obtained. (EA practice </context></contexts></citation><citation id="28455"><authors>R Drechsler</authors><title>Evolutionary Algorithms for VLSI CAD</title><year>1998</year><publisher>Kluwer Academic Publisher</publisher><raw>R. Drechsler. Evolutionary Algorithms for VLSI CAD. Kluwer Academic Publisher, 1998.</raw><contexts><context>tors and mutations for permutation problems are used. For the crossover operators two parents are selected by the method described above. For more details about the evolutionary operators we refer to [13, 3, 18, 5, 14]. Notice that a simple exchange of the parts between the cut positions (as often applied to binary encoded EA problems) is not possible, since this would often produce invalid solutions. PMX [13]: Cho</context></contexts></citation><citation id="28456"><authors>R Drechsler,B Becker,N Göckel</authors><title>A genetic algorithm for variable ordering of OBDDs</title><venue>IEE Proceedings</venue><venType>CONFERENCE</venType><year>1996</year><volume>143</volume><raw>R. Drechsler, B. Becker, and N. Göckel. A genetic algorithm for variable ordering of OBDDs. IEE Proceedings, 143(6):364–368, 1996.</raw><contexts><context>OP has theoretically been supported. In this context EAs have been shown to be a promising approach, i.e. they work very well for BDD minimization and other variants of permutation problems (see e.g. [6, 14]). In this paper we present an EA for determining a good ordering for a BDD. The BDD is optimized in such a way that the corresponding DSOP is minimized. The parameters of the EA are studied in detail</context></contexts></citation><citation id="28457"><authors>B J Falkowski</authors><title>Calculation of rademacher-walsh spectral coefficients for systems of completely and incompletely specified boolean functions</title><venue>In IEEE Proceedings on Circuits</venue><venType>CONFERENCE</venType><year>1993</year><pages>1698--1701</pages><raw>B.J. Falkowski. Calculation of rademacher-walsh spectral coefficients for systems of completely and incompletely specified boolean functions. In IEEE Proceedings on Circuits, pages 1698–1701, 1993.</raw><contexts><context>troduction A DSOP is a representation of a Boolean function as a sum of disjoint cubes. DSOPs are used in several applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit r</context></contexts></citation><citation id="28458"><authors>B J Falkowski,C-H Chang</authors><title>Paired haar spectra computation through operations on disjoint cubes</title><venue>In IEEE Proceedings on Circuits, Devices and Systems</venue><venType>CONFERENCE</venType><year>1999</year><pages>117--123</pages><raw>B.J. Falkowski and C.-H. Chang. Paired haar spectra computation through operations on disjoint cubes. In IEEE Proceedings on Circuits, Devices and Systems, pages 117–123, 1999.</raw><contexts><context>troduction A DSOP is a representation of a Boolean function as a sum of disjoint cubes. DSOPs are used in several applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit r</context></contexts></citation><citation id="28459"><authors>B J Falkowski,I Schäfer,C-H Chang</authors><title>An effective computer algorithm for the calculation of disjoint cube representation of boolean functions</title><venue>In Midwest Symposium on Circuits and Systems</venue><venType>CONFERENCE</venType><year>1993</year><pages>1308--1311</pages><raw>B.J. Falkowski, I. Schäfer, and C.-H. Chang. An effective computer algorithm for the calculation of disjoint cube representation of boolean functions. In Midwest Symposium on Circuits and Systems, pages 1308–1311, 1993.</raw><contexts><context>veral applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit representations of the cubes and therefore are only applicable to small instances of the problem. BDDs in </context></contexts></citation><citation id="28460"><authors>F Ferrandi,A Macii,E Macii,M Poncino,R Scarsi,F Somenzi</authors><title>Symbolic algorithms for layout-oriented synthesis of pass transistor logic circuits</title><venue>In Int’l Conf. on CAD</venue><venType>CONFERENCE</venType><year>1998</year><pages>235--241</pages><raw>F. Ferrandi, A. Macii, E. Macii, M. Poncino, R. Scarsi, and F. Somenzi. Symbolic algorithms for layout-oriented synthesis of pass transistor logic circuits. In Int’l Conf. on CAD, pages 235–241, 1998.</raw><contexts><context>ble to small instances of the problem. BDDs in general are an efficient data structure for representation and manipulation of Boolean functions. They are well-known and widely used in logic synthesis [16, 10] and formal verification [2, 15] of integrated circuits. BDDs are well-suited for applications in the area of logic synthesis, because the cubes in the ON-set of a Boolean function are implicitly repr</context></contexts></citation><citation id="28461"><authors>G Fey,R Drechsler</authors><title>A hybrid approach combining symbolic and structural techniques for disjoint SOP minimization</title><venue>In Workshop on Synthesis And System Integration of Mixed Information technologies (SASIMI</venue><venType>CONFERENCE</venType><year>2003</year><pages>54--60</pages><raw>G. Fey and R. Drechsler. A hybrid approach combining symbolic and structural techniques for disjoint SOP minimization. In Workshop on Synthesis And System Integration of Mixed Information technologies (SASIMI), pages 54–60, 2003.</raw><contexts><context>lean function are implicitly represented in this data structure. A hybrid approach for the minimization of DSOPs relying on BDDs in combination with structural methods has recently been introduced in [11]. It hassbeen shown that BDDs are applicable to the problem of DSOP minimization. Given a BDD of a Boolean function, the DSOP can easily be constructed: each one-path, i.e. a path from the root to the</context><context>other variable is chosen. No variable is chosen twice during this process. For the evaluation of our fitness function, in the following the improved pathminimization algorithm based upon sifting from [11] is used. This algorithm employs structural techniques to reduce the number of cubes in the DSOP. mp, 3 Evolutionary Algorithm In this section we describe the Evolutionary Algorithm (EA) that is appli</context><context>vidual a fitness that measures the quality of the variable ordering. First the BDD is constructed using the variable ordering given by the individual, then the number of reduced one-paths are counted [11]. The selection is performed by roulette wheel selection and we also make use of steady-state reproduction [4]: The best individuals of the old population are included in the new one of equal size. Th</context><context> 25 times to the 37 benchmarks in the test suite. Each time a randomly chosen seed for the random number generator was used. In column hybrid the number of cubes resulting from the method proposed in [11] for each function is given. Columns EA summarize the results from the EA proposed in this paper. min. and max. show the minimal and maximal DSOP of all test runs, respectively. In column median the m</context></contexts></citation><citation id="28462"><authors>N Göckel,R Drechsler,B Becker</authors><title>GAME: A software environment for using genetic algorithms in circuit design</title><venue>In Applications of Computer Systems</venue><venType>CONFERENCE</venType><year>1997</year><pages>240--247</pages><raw>N. Göckel, R. Drechsler, and B. Becker. GAME: A software environment for using genetic algorithms in circuit design. In Applications of Computer Systems, pages 240–247, 1997.</raw><contexts><context> with 256 MB of physical memory. The machine was running under Linux. Control programs for the experiments were written in Python. The EA was based on the C++ library for evolutionary algorithms GAME [12] (version 2.43). The experimental results show the quality of the proposed evolutionary method. The EA is applied to several benchmark functions, most of them taken from LGSynth93. The experiments are</context></contexts></citation><citation id="28463"><authors>D E Goldberg,R Lingle</authors><title>Alleles, loci, and the traveling salesman problem</title><venue>In Int’l Conference on Genetic Algorithms</venue><venType>CONFERENCE</venType><year>1985</year><pages>154--159</pages><raw>D.E. Goldberg and R. Lingle. Alleles, loci, and the traveling salesman problem. In Int’l Conference on Genetic Algorithms, pages 154–159, 1985.</raw><contexts><context>tors and mutations for permutation problems are used. For the crossover operators two parents are selected by the method described above. For more details about the evolutionary operators we refer to [13, 3, 18, 5, 14]. Notice that a simple exchange of the parts between the cut positions (as often applied to binary encoded EA problems) is not possible, since this would often produce invalid solutions. PMX [13]: Cho</context></contexts></citation><citation id="28464"><authors>M Hilgemeier,N Drechsler,R Drechsler</authors><title>Minimizing the number of one-paths in BDDs by an evolutionary algorithm</title><venue>In Congress on Evolutionary Computation</venue><venType>CONFERENCE</venType><year>2003</year><pages>1724--1731</pages><raw>M. Hilgemeier, N. Drechsler, and R. Drechsler. Minimizing the number of one-paths in BDDs by an evolutionary algorithm. In Congress on Evolutionary Computation, pages 1724–1731, 2003.</raw><contexts><context>OP has theoretically been supported. In this context EAs have been shown to be a promising approach, i.e. they work very well for BDD minimization and other variants of permutation problems (see e.g. [6, 14]). In this paper we present an EA for determining a good ordering for a BDD. The BDD is optimized in such a way that the corresponding DSOP is minimized. The parameters of the EA are studied in detail</context><context>tors and mutations for permutation problems are used. For the crossover operators two parents are selected by the method described above. For more details about the evolutionary operators we refer to [13, 3, 18, 5, 14]. Notice that a simple exchange of the parts between the cut positions (as often applied to binary encoded EA problems) is not possible, since this would often produce invalid solutions. PMX [13]: Cho</context><context> above, until the new position j has already been copied in the children elements. Then a “cycle” has been found and the remaining positions in child1 (child2) are taken from parent1 (parent2).sMERGE [14]: It produces the first child in the following way. Alternating between the parents, MERGE takes one variable index from each parent (in the order they appear in the parents) until the double permutat</context><context> operator weighting used for the EA proposed in here (column EA) is shown in parallel with the results using a different kind of operator weighting (column EAP ). The problem specific weightings from [14] were used as reference (PMX: 98%, Inversion: 1%, MUT1: 7%, MUT2: 7%). The comparison of the resultssshows the advantage of the proposed setting for DSOP minimization. Finally, the runtimes of the EA </context></contexts></citation><citation id="28465"><authors>Kropf</authors><title>Introduction to Formal Hardware Verification</title><year>1999</year><publisher>Springer</publisher><raw>Th. Kropf. Introduction to Formal Hardware Verification. Springer, 1999.</raw><contexts><context>blem. BDDs in general are an efficient data structure for representation and manipulation of Boolean functions. They are well-known and widely used in logic synthesis [16, 10] and formal verification [2, 15] of integrated circuits. BDDs are well-suited for applications in the area of logic synthesis, because the cubes in the ON-set of a Boolean function are implicitly represented in this data structure. </context></contexts></citation><citation id="28466"><authors>Y-T Lai,S Sastry,M Pedram</authors><title>Boolean matching using binary decision diagrams with applications to logic synthesis and verification</title><venue>In Int’l Conf. on CAD</venue><venType>CONFERENCE</venType><year>1992</year><pages>452--458</pages><raw>Y.-T. Lai, S. Sastry, and M. Pedram. Boolean matching using binary decision diagrams with applications to logic synthesis and verification. In Int’l Conf. on CAD, pages 452–458, 1992.</raw><contexts><context>ble to small instances of the problem. BDDs in general are an efficient data structure for representation and manipulation of Boolean functions. They are well-known and widely used in logic synthesis [16, 10] and formal verification [2, 15] of integrated circuits. BDDs are well-suited for applications in the area of logic synthesis, because the cubes in the ON-set of a Boolean function are implicitly repr</context></contexts></citation><citation id="28467"><authors>A Mishchenko,M Perkowski</authors><title>Fast heuristic minimization of exclusivesums-of-products</title><venue>In Int’l Workshop on Applications of the Reed-Muller Expansion in Circuit Design</venue><venType>CONFERENCE</venType><year>2001</year><pages>242--250</pages><raw>A. Mishchenko and M. Perkowski. Fast heuristic minimization of exclusivesums-of-products. In Int’l Workshop on Applications of the Reed-Muller Expansion in Circuit Design, pages 242–250, 2001.</raw><contexts><context>re used in several applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit representations of the cubes and therefore are only applicable to small instances of the probl</context></contexts></citation><citation id="28468"><authors>I M Oliver,D J Smith,J R C Holland</authors><title>A study of permutation crossover operators on the traveling salesman problem</title><venue>In Int’l Conference on Genetic Algorithms</venue><venType>CONFERENCE</venType><year>1987</year><pages>224--230</pages><raw>I.M. Oliver, D.J. Smith, and J.R.C. Holland. A study of permutation crossover operators on the traveling salesman problem. In Int’l Conference on Genetic Algorithms, pages 224–230, 1987.</raw><contexts><context>tors and mutations for permutation problems are used. For the crossover operators two parents are selected by the method described above. For more details about the evolutionary operators we refer to [13, 3, 18, 5, 14]. Notice that a simple exchange of the parts between the cut positions (as often applied to binary encoded EA problems) is not possible, since this would often produce invalid solutions. PMX [13]: Cho</context><context>elements. Construct the children by choosing the part between the cut position from one parent and preserve the relative position and order of as many variables as possible from the second parent. CX [18]: Choose a single position i in the parent elements at random. Copy the values of this position into the children at exactly the same position: child1[i] = parent1[i] and child2[i] = parent2[i]. Then,</context></contexts></citation><citation id="28469"><authors>R Rudell</authors><title>Dynamic variable ordering for ordered binary decision diagrams</title><venue>In Int’l Conf. on CAD</venue><venType>CONFERENCE</venType><year>1993</year><pages>42--47</pages><raw>R. Rudell. Dynamic variable ordering for ordered binary decision diagrams. In Int’l Conf. on CAD, pages 42–47, 1993.</raw><contexts><context>re the number of one-paths is minimized. Known techniques to minimize the number of nodes can be used to minimize the number of paths by changing the objective function. One such technique is sifting [19]: A variable is chosen and moved to any position of the variable order based on exchange of adjacent variables. Then it is fixed at the best position (i.e. where the smallest BDD results), afterwards </context></contexts></citation><citation id="28470"><authors>T Sasao</authors><title>EXMIN2: A simplification algorithm for Exclusive-OR-Sumof products expressions for multiple-valued-input two-valued-output functions</title><venue>IEEE Trans. on CAD</venue><venType>JOURNAL</venType><year>1993</year><volume>12</volume><raw>T. Sasao. EXMIN2: A simplification algorithm for Exclusive-OR-Sumof products expressions for multiple-valued-input two-valued-output functions. IEEE Trans. on CAD, 12:621–632, 1993.</raw><contexts><context>re used in several applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit representations of the cubes and therefore are only applicable to small instances of the probl</context></contexts></citation><citation id="28471"><authors>L Shivakumaraiah</authors><title>and M.Thornton. Computation of disjoint cube representations using a maximal binate variable heuristic</title><venue>In Southeastern Symposium on System Theory</venue><venType>CONFERENCE</venType><year>2002</year><pages>417--421</pages><raw>L. Shivakumaraiah and M.Thornton. Computation of disjoint cube representations using a maximal binate variable heuristic. In Southeastern Symposium on System Theory, pages 417–421, 2002.</raw><contexts><context>veral applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit representations of the cubes and therefore are only applicable to small instances of the problem. BDDs in </context></contexts></citation><citation id="28472"><authors>M Thornton,R Drechsler,D M Miller</authors><venue>Spectral Techniques in VLSI CAD</venue><venType>CONFERENCE</venType><year>2001</year><publisher>Kluwer Academic Publisher</publisher><raw>M. Thornton, R. Drechsler, and D.M. Miller. Spectral Techniques in VLSI CAD. Kluwer Academic Publisher, 2001.</raw><contexts><context>troduction A DSOP is a representation of a Boolean function as a sum of disjoint cubes. DSOPs are used in several applications in the area of CAD, e.g. the calculation of spectra of Boolean functions [7, 8, 22] or as a starting point for the minimization of Exclusive-Or-Sum-Of-Products (ESOPs) [17, 20]. In [9, 21] some techniques for minimization of DSOPs have been introduced. They are working on explicit r</context></contexts></citation><citation id="28473"><authors>D Whitley,T Starkweather,D Fuquay</authors><title>Scheduling problems and traveling salesman: The genetic edge recombination operator</title><venue>In Int’l Conference on Genetic Algorithms</venue><venType>CONFERENCE</venType><year>1989</year><pages>133--140</pages><raw>D. Whitley, T. Starkweather, and D. Fuquay. Scheduling problems and traveling salesman: The genetic edge recombination operator. In Int’l Conference on Genetic Algorithms, pages 133–140, 1989.</raw><contexts><context>e use an integer encoding to represent the ordering of the variables. (A binary encoding would require special repair operators to avoid the creation of invalid solutions similar to the TSP, see e.g. [23].) Each integer vector of length n represents a permutation of the variables and thus it is a feasible ordering. The length of the strings is given by the number of variables n, because for each varia</context></contexts></citation></citations><fileInfo><url>http://www.informatik.uni-bremen.de/agra/doc/work/evohot04.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>50d17e5568c2ec56a170b76358f4383e6c32888c</sha1></checkSum></checkSums></fileInfo></document>