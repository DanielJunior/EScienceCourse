<document id="10.1.1.1.1519"><title src="SVM HeaderParse 0.1">Survey &amp; Taxonomy of Packet Classification Techniques</title><abstract src="SVM HeaderParse 0.1">Packet classification is an enabling function for a variety of Internet applications including Quality of Service, security, monitoring, and multimedia communications. In order to classify a packet as belonging to a particular flow or set of flows, network nodes must perform a search over a set of filters using multiple fields of the packet as the search key. In general, there have been two major threads of research addressing packet classification: algorithmic and architectural. A few pioneering groups of researchers posed the problem, provided complexity bounds, and offered a collection of algorithmic solutions. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms. Given the inability of early algorithms to meet performance constraints imposed by high speed links, researchers in industry and academia devised architectural solutions to the problem. This thread of research produced the most widely-used packet classification device technology, Ternary Content Addressable Memory (TCAM). New architectural research combines intelligent algorithms and novel architectures to eliminate many of the unfavorable characteristics of current TCAMs. We observe that the community appears to be converging on a combined algorithmic and architectural approach to the problem. Using a taxonomy based on the high-level approach to the problem and a minimal set of running examples, we provide</abstract><keywords></keywords><authors><author id="4211"><name src="SVM HeaderParse 0.1">David E. Taylor</name><address src="SVM HeaderParse 0.1">; Campus Box 1045; One Brookings Drive; Saint Louis, MO 63130</address><email src="SVM HeaderParse 0.1">davidtaylor@wustl.edu</email><order>1</order></author><author id="4212"><name src="SVM HeaderParse 0.1">Sa Da</name><address src="SVM HeaderParse 0.1">11010010 * TCP [3:15] 0 3</address><order>2</order></author><author id="4213"><name src="SVM HeaderParse 0.1">Prot Dp</name><order>3</order></author><author id="4214"><name src="SVM HeaderParse 0.1">Flowid Pt</name><address src="SVM HeaderParse 0.1">101101 * 001110 *  * [0:15] 2 8†</address><order>4</order></author></authors><citations src="ParsCit 1.0"><citation id="28572"><authors>P Gupta,N McKeown</authors><title>Packet Classification on Multiple Fields</title><venue>in ACM Sigcomm</venue><venType>CONFERENCE</venType><year>1999</year><raw>P. Gupta and N. McKeown, “Packet Classification on Multiple Fields,” in ACM Sigcomm, August 1999.</raw><contexts><context>esearch addressing this problem: algorithmic and architectural. A few pioneering groups of researchers posed the problem, provided complexity bounds, and offered a collection of algorithmic solutions [1, 2, 3, 4]. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms [5, 6, 7]. Given the inability of early algorithms to meet the p</context><context>t Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in this class are amenable to high-performance hardware implementation. We discuss these observations in more detail and provide motivation for packet classification on larger num</context><context> possibilities to provide significantly better average performance. Gupta and McKeown published a number of observations regarding the characteristics of real filter sets which have been widely cited [1]. Others have performed analyses on real filter sets and published their observations [12, 5, 16, 7]. The following is a distillation of observations relevant to our discussion: • Current filter set s</context><context>low Classification (RFC) Leveraging many of the same observations, Gupta and McKeown introduced Recursive Flow Classification (RFC) which provides high lookup rates at the cost of memory inefficiency [1]. The authors introduced a unique high-level view of the packet classification problem. Essentially, packet classification can be viewed as the reduction of an m-bit string defined by the packet field</context><context>tch technique like hashing. We probe a tuple for a matching filter by using the bits of the packet field specified by the tuple as the search key. For example, we construct a search key for the tuple [1, 3, 2, 0, 1] by concatenating the first bit of the packet source address, the first three bits of the packet destination address, the Range ID of the source port range at Nesting Level 2 covering the packet sourc</context></contexts></citation><citation id="28573"><authors>P Gupta,N McKeown</authors><title>Packet Classification using Hierarchical Intelligent Cuttings</title><venue>in Hot Interconnects VII</venue><venType>CONFERENCE</venType><year>1999</year><raw>P. Gupta and N. McKeown, “Packet Classification using Hierarchical Intelligent Cuttings,” in Hot Interconnects VII, August 1999.</raw><contexts><context>vel 0 covering the packet destination port 35sTable 5: Example filter set; address fields are 4-bits and port ranges cover 4-bit port numbers. Filter SA DA SP DP Prot Tuple a 0∗ 001∗ 2 : 2 0 : 15 TCP [1, 3, 2, 0, 1] b 01∗ 0∗ 0 : 15 0 : 4 UDP [2, 1, 0, 1, 1] c 0110 0011 0 : 4 5 : 15 TCP [4, 4, 1, 1, 1] d 1100 ∗ 5 : 15 2 : 2 UDP [4, 0, 1, 2, 1] e 1∗ 110∗ 2 : 2 0 : 15 UDP [1, 3, 2, 0, 1] f 10∗ 1∗ 0 : 15 0 : 4 TCP [</context><context>1] h 0011 ∗ 5 : 15 2 : 2 TCP [4, 0, 1, 2, 1] i 0∗ 110∗ 2 : 2 0 : 15 UDP [1, 3, 2, 0, 1] j 10∗ 0∗ 2 : 2 2 : 2 TCP [2, 1, 2, 2, 1] k 0110 1100 0 : 15 0 : 15 ICMP [4, 4, 0, 0, 1] l 1110 ∗ 2 : 2 0 : 15 ∗ [4, 0, 2, 0, 0] Nesting Level 0 1 2 0 0 Range ID 0 1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Figure 22: Example of assigning tuple values for ranges based on Nesting Level and Range ID. number, and the protocol field.</context><context>the address length. Each filter mapping to a tuple [i, j] leaves a marker in each tuple to its left in its row. For example, a filter (110∗, 0111) stored in tuple [3, 4] leaves markers (11∗, 0111) in [2, 4] and (1∗, 0111) in [1, 4]. For all filters and markers in a tuple [i, j], we can precompute the best matching filter from among the filters stored in less specific tuples. Consider tuple [2, 2], label</context><context>also be represented as a bitmap as in the Parallel BV technique. 8 Note that filters containing a wildcard are not included; these filters may be searched by maintaining separate search tries. 37s0 1 [1,3,2,0,1] [1,3,2,0,1] 0 1 [2,1,0,1,1] 0 [2,1,0,1,1] [2,1,2,2,1] 1 1 0 1 [4,0,1,2,1] [4,4,1,1,1] [4,4,0,0,1] [2,1,0,1,1] [2,1,2,2,1] 0 [4,4,1,1,1] 0 1 [1,3,2,0,1] 1 Source Address Pruning Trie 1 Destination Add</context></contexts></citation><citation id="28574"><authors>T V Lakshman,D Stiliadis</authors><title>High-Speed Policy-based Packet Forwarding Using Efficient</title><venue>Multidimensional Range Matching,” in ACM SIGCOMM‘98</venue><venType>CONFERENCE</venType><year>1998</year><raw>T. V. Lakshman and D. Stiliadis, “High-Speed Policy-based Packet Forwarding Using Efficient Multidimensional Range Matching,” in ACM SIGCOMM‘98, September 1998.</raw><contexts><context>esearch addressing this problem: algorithmic and architectural. A few pioneering groups of researchers posed the problem, provided complexity bounds, and offered a collection of algorithmic solutions [1, 2, 3, 4]. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms [5, 6, 7]. Given the inability of early algorithms to meet the p</context><context>rst multiple field packet classification algorithms targeted to a hardware implementation. Their seminal technique is commonly referred to as the Lucent bit-vector scheme or Parallel Bit-Vectors (BV) [3]. The authors make the initial assumption that the filters may be sorted according to priority. Like the previously discussed “cutting” algorithms, Parallel BV utilizes a geometric view of the filter </context><context>tch technique like hashing. We probe a tuple for a matching filter by using the bits of the packet field specified by the tuple as the search key. For example, we construct a search key for the tuple [1, 3, 2, 0, 1] by concatenating the first bit of the packet source address, the first three bits of the packet destination address, the Range ID of the source port range at Nesting Level 2 covering the packet sourc</context><context>vel 0 covering the packet destination port 35sTable 5: Example filter set; address fields are 4-bits and port ranges cover 4-bit port numbers. Filter SA DA SP DP Prot Tuple a 0∗ 001∗ 2 : 2 0 : 15 TCP [1, 3, 2, 0, 1] b 01∗ 0∗ 0 : 15 0 : 4 UDP [2, 1, 0, 1, 1] c 0110 0011 0 : 4 5 : 15 TCP [4, 4, 1, 1, 1] d 1100 ∗ 5 : 15 2 : 2 UDP [4, 0, 1, 2, 1] e 1∗ 110∗ 2 : 2 0 : 15 UDP [1, 3, 2, 0, 1] f 10∗ 1∗ 0 : 15 0 : 4 TCP [</context><context>robes to at most (2W − 1) where W is the address length. Each filter mapping to a tuple [i, j] leaves a marker in each tuple to its left in its row. For example, a filter (110∗, 0111) stored in tuple [3, 4] leaves markers (11∗, 0111) in [2, 4] and (1∗, 0111) in [1, 4]. For all filters and markers in a tuple [i, j], we can precompute the best matching filter from among the filters stored in less specific</context></contexts></citation><citation id="28575"><authors>V Srinivasan,S Suri,G Varghese,M Waldvogel</authors><venue>Fast and Scalable Layer Four Switching,” in ACM Sigcomm</venue><venType>CONFERENCE</venType><year>1998</year><raw>V. Srinivasan, S. Suri, G. Varghese, and M. Waldvogel, “Fast and Scalable Layer Four Switching,” in ACM Sigcomm, June 1998.</raw><contexts><context>at filters containing a wildcard are not included; these filters may be searched by maintaining separate search tries. 37s0 1 [1,3,2,0,1] [1,3,2,0,1] 0 1 [2,1,0,1,1] 0 [2,1,0,1,1] [2,1,2,2,1] 1 1 0 1 [4,0,1,2,1] [4,4,1,1,1] [4,4,0,0,1] [2,1,0,1,1] [2,1,2,2,1] 0 [4,4,1,1,1] 0 1 [1,3,2,0,1] 1 Source Address Pruning Trie 1 Destination Address Pruning Trie [4,0,1,2,1] [4,0,2,0,0] 1 0 0 [2,1,0,1,1] [4,4,1,1,1] [4</context></contexts></citation><citation id="28576"><authors>F Baboescu,G Varghese</authors><venue>Scalable Packet Classification,” in ACM Sigcomm</venue><venType>CONFERENCE</venType><year>2001</year><raw>F. Baboescu and G. Varghese, “Scalable Packet Classification,” in ACM Sigcomm, August 2001.</raw><contexts><context>, and offered a collection of algorithmic solutions [1, 2, 3, 4]. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms [5, 6, 7]. Given the inability of early algorithms to meet the performance constraints discussed in Section 1.1, researchers in industry and academia devised architectural solutions to the problem. This thread</context><context>t Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in this class are amenable to high-performance hardware implementation. We discuss these observations in more detail and provide motivation for packet classification on larger num</context><context>lished a number of observations regarding the characteristics of real filter sets which have been widely cited [1]. Others have performed analyses on real filter sets and published their observations [12, 5, 16, 7]. The following is a distillation of observations relevant to our discussion: • Current filter set sizes are small, ranging from tens of filters to less than 5000 filters. It is unclear if the size li</context><context>oescu and Varghese introduced the Aggregated Bit-Vector (ABV ) algorithm which seeks to improve the performance of the Parallel BV technique by leveraging statistical observations of real filter sets [5]. ABV converts all filter fields to prefixes, hence it incurs the same replication penalty as TCAMs which we described in Section 4.2. Conceptually, ABV starts with d sets of N-bit vectors constructed</context></contexts></citation><citation id="28577"><authors>A Feldmann,S Muthukrishnan</authors><title>Tradeoffs for Packet Classification</title><venue>in IEEE Infocom</venue><venType>CONFERENCE</venType><year>2000</year><raw>A. Feldmann and S. Muthukrishnan, “Tradeoffs for Packet Classification,” in IEEE Infocom, March 2000.</raw><contexts><context>, and offered a collection of algorithmic solutions [1, 2, 3, 4]. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms [5, 6, 7]. Given the inability of early algorithms to meet the performance constraints discussed in Section 1.1, researchers in industry and academia devised architectural solutions to the problem. This thread</context><context> filter set. 5.7 Fat Inverted Segment (FIS) Trees Feldman and Muthukrishnan introduced another framework for packet classification using independent field searches on Fat Inverted Segment (FIS) Trees [6]. Like the previously discussed “cutting” algorithms, FIS Trees utilize a geometric view of the filter set and map filters into d-dimensional space. As shown in Fig21squery 0110, 11 Index Block ****, </context></contexts></citation><citation id="28578"><authors>T Y C Woo</authors><title>A Modular Approach to Packet Classification: Algorithms and Results</title><venue>in IEEE Infocom</venue><venType>CONFERENCE</venType><year>2000</year><raw>T. Y. C. Woo, “A Modular Approach to Packet Classification: Algorithms and Results,” in IEEE Infocom, March 2000.</raw><contexts><context>, and offered a collection of algorithmic solutions [1, 2, 3, 4]. Subsequently, the design space has been vigorously explored by many offering new algorithms and improvements upon existing algorithms [5, 6, 7]. Given the inability of early algorithms to meet the performance constraints discussed in Section 1.1, researchers in industry and academia devised architectural solutions to the problem. This thread</context><context>lished a number of observations regarding the characteristics of real filter sets which have been widely cited [1]. Others have performed analyses on real filter sets and published their observations [12, 5, 16, 7]. The following is a distillation of observations relevant to our discussion: • Current filter set sizes are small, ranging from tens of filters to less than 5000 filters. It is unclear if the size li</context><context>issue with deeper pipelines and higher link rates. Linear search is a popular solution for the final stage of a lookup when the set of possible matching filters has been reduced to a bounded constant [2, 7, 13]. 4.2 Ternary Content Addressable Memory (TCAM) Taking a cue from fully-associative cache memories, Ternary Content Addressable Memory (TCAM) devices perform a parallel search over all filters in the </context><context>t e d j Woo independently applied the same approach as HiCuts and introduced a flexible framework for packet classification based on a multi-stage search over ternary strings representing the filters [7]. The framework contains three stages: an index jump table, search trees, and filter buckets. An example data structure for the filter set in Table 4 is shown in Figure 11. A search begins by using se</context><context>ng, the HyperCuts algorithm [13] improves upon the HiCuts algorithm developed by Gupta and McKeown [2] and also shares similarities with the Modular Packet Classification algorithms introduced by Woo [7]. In essence, HyperCuts is a decision tree algorithm that attempts to minimize the depth of the tree by selecting multiple “cuts” in multi-dimensional space that partition the filter set into lists of</context></contexts></citation><citation id="28579"><authors>R A Kempke,A J McAuley</authors><venue>Ternary CAM Memory Architecture and Methodology.” United States Patent 5,841,874</venue><venType>CONFERENCE</venType><year>1998</year><publisher>Motorola, Inc</publisher><raw>R. A. Kempke and A. J. McAuley, “Ternary CAM Memory Architecture and Methodology.” United States Patent 5,841,874, November 1998. Motorola, Inc.</raw></citation><citation id="28580"><authors>G Gibson,F Shafai,J Podaima</authors><title>Content Addressable Memory Storage Device</title><venue>United States Patent 6,044,005, March 2000. SiberCore Technologies, Inc</venue><venType>CONFERENCE</venType><raw>G. Gibson, F. Shafai, and J. Podaima, “Content Addressable Memory Storage Device.” United States Patent 6,044,005, March 2000. SiberCore Technologies, Inc.</raw><contexts><context>y and academia devised architectural solutions to the problem. This thread of research produced the most widely-used packet classification device technology, Ternary Content Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in t</context><context>.7 times larger than a standard SRAM cell [11]. A circuit diagram of a standard TCAM cell is shown in Figure 3. Some proprietary architectures allow TCAM cells to require as few as 14 transistors [8] [9]. The massive parallelism inherent in TCAM architecture is the source of high power consumption. Each “bit” of TCAM match logic must drive a match word line which signals a match for the given key. Th</context></contexts></citation><citation id="28581"><authors>A J McAulay,P Francis</authors><title>Fast Routing Table Lookup Using CAMs</title><venue>in IEEE Infocom</venue><venType>CONFERENCE</venType><year>1993</year><raw>A. J. McAulay and P. Francis, “Fast Routing Table Lookup Using CAMs,” in IEEE Infocom, 1993.</raw><contexts><context>y and academia devised architectural solutions to the problem. This thread of research produced the most widely-used packet classification device technology, Ternary Content Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in t</context></contexts></citation><citation id="28582"><authors>R K Montoye</authors><title>Apparatus for Storing “Don’t Care” in a Content Addressable Memory Cell.” United States Patent 5,319,590</title><year>1994</year><raw>R. K. Montoye, “Apparatus for Storing “Don’t Care” in a Content Addressable Memory Cell.” United States Patent 5,319,590, June 1994. HaL Computer Systems, Inc.</raw><contexts><context>y and academia devised architectural solutions to the problem. This thread of research produced the most widely-used packet classification device technology, Ternary Content Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in t</context><context>ry Content Addressable Memory (TCAM) Taking a cue from fully-associative cache memories, Ternary Content Addressable Memory (TCAM) devices perform a parallel search over all filters in the filter set [11]. TCAMs were developed with the ability to store a “Don’t Care” state in addition to a binary digit. Input keys are compared against every TCAM entry, thereby enabling them to retain single clock cycl</context><context>(0, 1, Don’t Care) is encoded using two registers a1 and a2. bit and four transistors for the match logic, resulting in a total of 16 transistors and a cell 2.7 times larger than a standard SRAM cell [11]. A circuit diagram of a standard TCAM cell is shown in Figure 3. Some proprietary architectures allow TCAM cells to require as few as 14 transistors [8] [9]. The massive parallelism inherent in TCAM </context></contexts></citation><citation id="28583"><authors>F Baboescu,S Singh,G Varghese</authors><title>Packet Classification for Core Routers: Is there an alternative to CAMs</title><venue>in IEEE Infocom</venue><venType>CONFERENCE</venType><year>2003</year><raw>F. Baboescu, S. Singh, and G. Varghese, “Packet Classification for Core Routers: Is there an alternative to CAMs?,” in IEEE Infocom, 2003.</raw><contexts><context>t Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in this class are amenable to high-performance hardware implementation. We discuss these observations in more detail and provide motivation for packet classification on larger num</context><context>lished a number of observations regarding the characteristics of real filter sets which have been widely cited [1]. Others have performed analyses on real filter sets and published their observations [12, 5, 16, 7]. The following is a distillation of observations relevant to our discussion: • Current filter set sizes are small, ranging from tens of filters to less than 5000 filters. It is unclear if the size li</context><context>. 5.2 Extended Grid-of-Tries (EGT) Baboescu, Singh, and Varghese proposed Extended Grid-of-Tries (EGT) that supports multiple fields searches without the need for many instances of the data structure [12]. EGT essentially alters the switch pointers to be jump pointers that direct the search to all possible matching filters, rather than the filters with the longest matching destination and source addre</context></contexts></citation><citation id="28584"><authors>S Singh,F Baboescu,G Varghese,J Wang</authors><title>Packet Classification Using Multidimensional Cutting</title><venue>in Proceedings of ACM SIGCOMM’03</venue><venType>CONFERENCE</venType><year>2003</year><pubAddress>Karlsruhe, Germany</pubAddress><raw>S. Singh, F. Baboescu, G. Varghese, and J. Wang, “Packet Classification Using Multidimensional Cutting,” in Proceedings of ACM SIGCOMM’03, August 2003. Karlsruhe, Germany.</raw><contexts><context>t Addressable Memory (TCAM) [8, 9, 10, 11]. Some of the most promising algorithmic research embraces the practice of leveraging the statistical structure of filter sets to improve average performance [1, 5, 12, 2, 13]. Several algorithms in this class are amenable to high-performance hardware implementation. We discuss these observations in more detail and provide motivation for packet classification on larger num</context><context>issue with deeper pipelines and higher link rates. Linear search is a popular solution for the final stage of a lookup when the set of possible matching filters has been reduced to a bounded constant [2, 7, 13]. 4.2 Ternary Content Addressable Memory (TCAM) Taking a cue from fully-associative cache memories, Ternary Content Addressable Memory (TCAM) devices perform a parallel search over all filters in the </context><context>B(0) 0 1 Figure 11: Modular packet classification using ternary strings and a three-stage search architecture. 5.5 HyperCuts Introduced by Singh, Baboescu, Varghese, and Wang, the HyperCuts algorithm [13] improves upon the HiCuts algorithm developed by Gupta and McKeown [2] and also shares similarities with the Modular Packet Classification algorithms introduced by Woo [7]. In essence, HyperCuts is a </context></contexts></citation><citation id="28585"><authors>E Spitznagel,D Taylor,J Turner</authors><title>Packet Classification Using Extended TCAMs</title><venue>in Proceedings of IEEE International Conference on Network Protocols (ICNP</venue><venType>CONFERENCE</venType><year>2003</year><raw>E. Spitznagel, D. Taylor, and J. Turner, “Packet Classification Using Extended TCAMs,” in Proceedings of IEEE International Conference on Network Protocols (ICNP), 2003.</raw><contexts><context>tion on larger numbers of fields in Section 2. New architectural research combines intelligent algorithms and novel architectures to eliminate many of the unfavorable characteristics of current TCAMs [14]. We observe that the community appears to be converging on a combined algorithmic and architectural approach to the problem [14, 15, 16]. In order to lend structure to our discussion, we develop a ta</context><context>RAM. Spitznagel, Taylor, and Turner recently introduced Extended TCAM (E-TCAM) which implements range matching directly in hardware and reduces power consumption by over 90% relative to standard TCAM [14]. We discuss E-TCAM in more detail in Section 5.6. While this represents promising new work in the architectural thread of research, it does not address the high cost per bit or scalability issues inh</context></contexts></citation><citation id="28586"><authors>D E Taylor,J S Turner</authors><title>Scalable Packet Classification using Distributed Crossproducting of Field Labels</title><venType>TECHREPORT</venType><year>2004</year><tech>Tech. Rep. WUCSE-2004-38</tech><raw>D. E. Taylor and J. S. Turner, “Scalable Packet Classification using Distributed Crossproducting of Field Labels,” Tech. Rep. WUCSE-2004-38, Department of Computer Science and Engineering, Washington University in Saint Louis, June 2004.</raw><contexts><context> to eliminate many of the unfavorable characteristics of current TCAMs [14]. We observe that the community appears to be converging on a combined algorithmic and architectural approach to the problem [14, 15, 16]. In order to lend structure to our discussion, we develop a taxonomy in Section 3 that frames each technique according to its high-level approach to the problem. The presentation of this taxonomy is </context><context>acket. Taylor and Turner also performed a battery of analyses on real filter sets, focusing on the maximum number of unique field values and unique combinations of field values which match any packet [15]. They found that the number of unique field values is less than the number of filters and the maximum number of unique field values matching any packet remains relatively constant for various filter </context></contexts></citation><citation id="28587"><authors>J van Lunteren,T Engbersen</authors><title>Fast and scalable packet classification</title><venue>IEEE Journal on Selected Areas in Communications</venue><venType>JOURNAL</venType><year>2003</year><pages>560--571</pages><volume>21</volume><raw>J. van Lunteren and T. Engbersen, “Fast and scalable packet classification,” IEEE Journal on Selected Areas in Communications, vol. 21, pp. 560–571, May 2003.</raw><contexts><context> to eliminate many of the unfavorable characteristics of current TCAMs [14]. We observe that the community appears to be converging on a combined algorithmic and architectural approach to the problem [14, 15, 16]. In order to lend structure to our discussion, we develop a taxonomy in Section 3 that frames each technique according to its high-level approach to the problem. The presentation of this taxonomy is </context><context>lished a number of observations regarding the characteristics of real filter sets which have been widely cited [1]. Others have performed analyses on real filter sets and published their observations [12, 5, 16, 7]. The following is a distillation of observations relevant to our discussion: • Current filter set sizes are small, ranging from tens of filters to less than 5000 filters. It is unclear if the size li</context><context>ates. 6.5 Parallel Packet Classification (P 2 C) The Parallel Packet Classification (P 2 C) scheme introduced by van Lunteren and Engbersen also falls into the class of techniques using decomposition [16]. The key novelties of P 2 C are its encoding and aggregation of intermediate results. Similar to the Parallel Bit-Vector and RFC techniques, P 2 C performs parallel searches in order to identify the </context></contexts></citation><citation id="28588"><authors>M E Kounavis,A Kumar,H Vin,R Yavatkar,A T Campbell</authors><venue>Directions in Packet Classification for Network Processors,” in Second Workshop on Network Processors (NP2</venue><venType>CONFERENCE</venType><year>2003</year><raw>M. E. Kounavis, A. Kumar, H. Vin, R. Yavatkar, and A. T. Campbell, “Directions in Packet Classification for Network Processors,” in Second Workshop on Network Processors (NP2), February 2003.</raw><contexts><context>s generated by independent searches on fields or collections of fields may be inherently limited. This observation led to a recently proposed framework for packet classification in network processors [17]. For example, in the filter table of 16 filters shown in Table 1, there are 12 unique address prefix pairs. For any given packet, a maximum of four unique address pairs will match. Likewise, there ar</context><context>technologies provide high bandwidth interfaces to several mega-bytes of off-chip memory [21, 36]. Network processors also provide a flexible platform for implementing packet classification techniques [37, 17, 38]. A number of current generation processors provide hardware assists for packet classification, interfaces to TCAM, and/or special instructions for search applications such as hash functions. Acknowle</context></contexts></citation><citation id="28589"><authors>al</authors><title>RObust Header Compression (ROHC): Framework and four profiles</title><venue>RTP, UDP, ESP, and uncompressed.” RFC 3095, July 2001. IETF Network Working Group</venue><venType>CONFERENCE</venType><raw>C. Bormann, et. al., “RObust Header Compression (ROHC): Framework and four profiles: RTP, UDP, ESP, and uncompressed.” RFC 3095, July 2001. IETF Network Working Group.</raw><contexts><context>ould like to use a header compression protocol like Robust Header Compression (ROHC). ROHC is a robust protocol that compresses packet headers for efficient use of wireless links with high loss rates [18]. In order to support this, the BSC must maintain a dynamic filter set which binds packets to ROHC contexts based on fields in the IPv6, UDP, and RTP headers. A total of seven header fields (352 bits)</context></contexts></citation><citation id="28590"><venue>SiberCore Technologies Inc., “SiberCAM Ultra-18M SCT1842.” Product Brief</venue><venType>CONFERENCE</venType><year>2002</year><raw>SiberCore Technologies Inc., “SiberCAM Ultra-18M SCT1842.” Product Brief, 2002.</raw><contexts><context>bit” of TCAM match logic must drive a match word line which signals a match for the given key. The extra logic and capacitive loading result in access times approximately three times longer than SRAM [19]. Additionally, power consumption per bit of storage is on the order of 3 micro-Watts per “bit” [20] compared to 20 to 30 nano-Watts per bit for SRAM [21]. In summary, TCAMs consume 150 times more pow</context></contexts></citation><citation id="28591"><venue>Micron Technology Inc., “Harmony TCAM 1Mb and 2Mb.” Datasheet</venue><venType>CONFERENCE</venType><year>2003</year><raw>Micron Technology Inc., “Harmony TCAM 1Mb and 2Mb.” Datasheet, January 2003.</raw><contexts><context>xtra logic and capacitive loading result in access times approximately three times longer than SRAM [19]. Additionally, power consumption per bit of storage is on the order of 3 micro-Watts per “bit” [20] compared to 20 to 30 nano-Watts per bit for SRAM [21]. In summary, TCAMs consume 150 times more power per bit than SRAM. Spitznagel, Taylor, and Turner recently introduced Extended TCAM (E-TCAM) whic</context></contexts></citation><citation id="28592"><venue>Micron Technology Inc., “36Mb DDR SIO SRAM 2-Word Burst.” Datasheet</venue><venType>CONFERENCE</venType><year>2002</year><raw>Micron Technology Inc., “36Mb DDR SIO SRAM 2-Word Burst.” Datasheet, December 2002.</raw><contexts><context>es approximately three times longer than SRAM [19]. Additionally, power consumption per bit of storage is on the order of 3 micro-Watts per “bit” [20] compared to 20 to 30 nano-Watts per bit for SRAM [21]. In summary, TCAMs consume 150 times more power per bit than SRAM. Spitznagel, Taylor, and Turner recently introduced Extended TCAM (E-TCAM) which implements range matching directly in hardware and r</context><context>ed memories in parallel in order to achieve wide data paths. Dual Data Rate (DDR) and Quad Data Rate (QDR) SRAM technologies provide high bandwidth interfaces to several mega-bytes of off-chip memory [21, 36]. Network processors also provide a flexible platform for implementing packet classification techniques [37, 17, 38]. A number of current generation processors provide hardware assists for packet clas</context></contexts></citation><citation id="28593"><authors>D Decasper,G Parulkar,Z Dittia,B Plattner</authors><title>Router Plugins: A Software Architecture for Next Generation Routers</title><venue>in Proceedings of ACM Sigcomm</venue><venType>CONFERENCE</venType><year>1998</year><raw>D. Decasper, G. Parulkar, Z. Dittia, and B. Plattner, “Router Plugins: A Software Architecture for Next Generation Routers,” in Proceedings of ACM Sigcomm, September 1998.</raw><contexts><context>t in Section 6.3. For filters defined by source and destination prefixes, Grid-of-Tries improves upon the directed acyclic graph (DAG) technique introduced by Decasper, Dittia, Parulkar, and Plattner [22]. This technique is also called set pruning trees because redundant subtrees can be “pruned” from the tree by allowing multiple incoming edges at a node. 11sa b c d e f g h 10* 0* 111 11* * [0:2] [3:7</context></contexts></citation><citation id="28594"><authors>J van</authors><title>Lunteren, “Searching very large routing tables in wide embedded memory</title><venue>in Proceedings of IEEE Globecom</venue><venType>CONFERENCE</venType><year>2001</year><pages>1615--1619</pages><volume>3</volume><raw>J. van Lunteren, “Searching very large routing tables in wide embedded memory,” in Proceedings of IEEE Globecom, vol. 3, pp. 1615–1619, November 2001.</raw><contexts><context>rch key, and querying the TCAM with the search key. For the single field searches, the authors employ the BARTs technique which restricts independent field searches to be either prefix or exact match [23]. Arbitrary ranges must be converted to prefixes, increasing the number of unique field specifications. The primary deficiency of P 2 C is its use of elementary intervals, as a single filter update ma</context></contexts></citation><citation id="28595"><authors>D E Taylor,J S Turner</authors><title>ClassBench: A Packet Classification Benchmark</title><venType>TECHREPORT</venType><year>2004</year><tech>Tech. Rep. WUCSE2004-28</tech><raw>D. E. Taylor and J. S. Turner, “ClassBench: A Packet Classification Benchmark,” Tech. Rep. WUCSE2004-28, Department of Computer Science &amp; Engineering, Washington University in Saint Louis, May 2004.</raw><contexts><context>eld search engines. The latter is achieved by a novel technique called Field Splitting which we do not discuss in this survey. Using a collection of 12 real filter sets and the ClassBench tools suite [24], the authors provide analyses of DCFL performance and resource requirements on filter sets of various sizes and compositions. For the 12 real filter sets, they show that the worst-case number of sequ</context></contexts></citation><citation id="28596"><authors>V Srinivasan,S Suri,G Varghese</authors><title>Packet classification using tuple space search</title><venue>in SIGCOMM 99</venue><venType>CONFERENCE</venType><year>1999</year><pages>135--146</pages><raw>V. Srinivasan, S. Suri, and G. Varghese, “Packet classification using tuple space search,” in SIGCOMM 99, pp. 135–146, 1999.</raw><contexts><context>ples is much less than the number of filters in the filter set, Srinivasan, Suri, and Varghese introduced the tuple space approach and a collection of Tuple Space Search algorithms in a seminal paper [25]. In order to illustrate the concept of tuples, we provide an example filter set of filters classifying on five fields in Table 5. Address prefixes cover 4-bit addresses and port ranges cover 4-bit po</context><context>ues discussed in Section 4. 7.1 Tuple Space Search &amp; Tuple Pruning The basic Tuple Space Search technique introduced by Srinivasan, Suri, and Varghese performs an exhaustive search of the tuple space [25]. For our example filter set in Table 5, a search would have to probe seven tuples instead of searching all 12 filters. Using a modest set of real filter sets, the authors found that Tuple Space Searc</context></contexts></citation><citation id="28597"><authors>V Srinivasan</authors><title>A Packet Classification and Filter</title><venue>Management System.” Microsoft Research</venue><venType>CONFERENCE</venType><year>2001</year><raw>V. Srinivasan, “A Packet Classification and Filter Management System.” Microsoft Research, 2001.</raw><contexts><context>ve to the basic Tuple Space Search, and a factor of 13 to 26 relative to an exhaustive search over the set of filters. Srinivasan expanded this set of algorithms with Entry Pruned Tuple Search (EPTS) [26]. This technique seeks to optimize the Pruned Tuple Search algorithm by eliminating the need to store a search data structure for each dimension by storing pruning information with matches in the tupl</context></contexts></citation><citation id="28598"><authors>M Waldvogel,G Varghese,J Turner,B Plattner</authors><title>Scalable high speed IP routing table lookups</title><venue>in Proceedings of ACM SIGCOMM ’97</venue><venType>CONFERENCE</venType><year>1997</year><pages>25--36</pages><raw>M. Waldvogel, G. Varghese, J. Turner, and B. Plattner, “Scalable high speed IP routing table lookups,” in Proceedings of ACM SIGCOMM ’97, pp. 25–36, September 1997.</raw><contexts><context>ions about the structure of the filter set. Rectangle Search employs the concepts of markers and precomputation introduced by the Binary Search on Prefix Lengths technique for longest prefix matching [27]. As shown in Figure 24, the tuple space for filters with two prefix fields may be viewed as a grid of rectangles where each rectangle is a tuple. For this example, we use the source and destination a</context></contexts></citation><citation id="28599"><authors>P Warkhede,S Suri,G Varghese</authors><title>Fast Packet Classification for Two-Dimensional Conflict-Free Filters</title><venue>in IEEE Infocom</venue><venType>CONFERENCE</venType><year>2001</year><raw>P. Warkhede, S. Suri, and G. Varghese, “Fast Packet Classification for Two-Dimensional Conflict-Free Filters,” in IEEE Infocom, 2001.</raw><contexts><context>7.3 Conflict-Free Rectangle Search W (d−1) d! Warkhede, Suri, and Varghese provide an optimized version of Rectangle Search for the special case of packet classification on a conflict-free filter set [28]. A filter set is defined to be conflict-free if there is no pair of overlapping filters in the filter set such that one filter is more specific than the other in one field and less specific in anothe</context></contexts></citation><citation id="28600"><authors>A Hari,S Suri,G Parulkar</authors><title>Detecting and Resolving Packet Filter Conflicts</title><venue>in Proceedings of IEEE Infocom</venue><venType>CONFERENCE</venType><year>2000</year><raw>A. Hari, S. Suri, and G. Parulkar, “Detecting and Resolving Packet Filter Conflicts,” in Proceedings of IEEE Infocom, 2000.</raw><contexts><context> The authors observe that in real filter sets conflicts are rare; furthermore, techniques exist to resolve filter conflicts by inserting a small set of resolving filters that resolve filter conflicts [29]. Conflict-Free Rectangle Search begins by mapping the filter set to the W × W tuple space. Using precomputation and markers, the authors prove that a binary search can be performed on the columns of </context></contexts></citation><citation id="28601"><authors>J L Hennessy,D A Patterson</authors><title>Computer Architecture A Quantitative Approach</title><year>1996</year><editors>ed</editors><publisher>Morgan Kaufmann Publishers, Inc</publisher><volume>2</volume><raw>J. L. Hennessy and D. A. Patterson, Computer Architecture A Quantitative Approach. Morgan Kaufmann Publishers, Inc., 2 ed., 1996.</raw><contexts><context>data requests contain sufficient locality, the average time to access data is significantly reduced when the time to access the cache is significantly less than the time to access other storage media [30]. In the context of packet classification, the lookup time is significantly reduced if the time to perform a cache query is significantly less than the time to perform a full lookup. The efficacy of c</context></contexts></citation><citation id="28602"><authors>F Chang,K Li,W</authors><title>chang Feng, “Approximate Packet Classification Caching</title><venue>OGI School of Science and Engineering at OHSU</venue><venType>TECHREPORT</venType><year>2003</year><tech>Tech. Rep. CSE03-002</tech><raw>F. Chang, K. Li, and W. chang Feng, “Approximate Packet Classification Caching,” Tech. Rep. CSE03-002, OGI School of Science and Engineering at OHSU, 2003.</raw><contexts><context>ear at most once in ten thousand packets, thus the cache must have a minimum capacity of ten thousand entries. Despite the skepticism, a number of cache designs for packet classification have emerged [31, 32, 33]. One intriguing design utilizes Bloom filters and allows for a small probability of misclassification [31]. Holding the misclassification probability to approximately one in a billion, the authors me</context></contexts></citation><citation id="28603"><authors>M M I</authors><title>Chvets, “Multi-zone Caches for Accelerating IP Routing Table Lookups</title><venue>in Proceedings of High-Performance Switching and Routing</venue><venType>CONFERENCE</venType><year>2002</year><raw>M. M. I. Chvets, “Multi-zone Caches for Accelerating IP Routing Table Lookups,” in Proceedings of High-Performance Switching and Routing, 2002.</raw><contexts><context>ear at most once in ten thousand packets, thus the cache must have a minimum capacity of ten thousand entries. Despite the skepticism, a number of cache designs for packet classification have emerged [31, 32, 33]. One intriguing design utilizes Bloom filters and allows for a small probability of misclassification [31]. Holding the misclassification probability to approximately one in a billion, the authors me</context></contexts></citation><citation id="28604"><authors>K Li,F Chang,D Berger,W</authors><title>chang Fang, “Architectures for Packet Classification Caching</title><venue>in Proceedings of IEEE ICON</venue><venType>CONFERENCE</venType><year>2003</year><raw>K. Li, F. Chang, D. Berger, and W. chang Fang, “Architectures for Packet Classification Caching,” in Proceedings of IEEE ICON, 2003.</raw><contexts><context>ear at most once in ten thousand packets, thus the cache must have a minimum capacity of ten thousand entries. Despite the skepticism, a number of cache designs for packet classification have emerged [31, 32, 33]. One intriguing design utilizes Bloom filters and allows for a small probability of misclassification [31]. Holding the misclassification probability to approximately one in a billion, the authors me</context></contexts></citation><citation id="28605"><authors>“Virtex-II Xilinx</authors><title>Pro Platform FPGAs: Introduction and Overview</title><year>2003</year><pages>083--1</pages><raw>Xilinx, “Virtex-II Pro Platform FPGAs: Introduction and Overview.” DS083-1 (v3.0), December 2003.</raw><contexts><context>example, a current generation Xilinx FPGA operates at over 400 MHz and contains 556 dual-port embedded memory blocks, 18Kb each with 36-bit wide data paths for a total of over 10Mb of embedded memory [34]. Current ASIC standard cell libraries offer dual- and quad-port embedded SRAMs operating at 625MHz [35]. It is standard practice to utilize several embedded memories in parallel in order to achieve w</context></contexts></citation><citation id="28606"><venue>IBM Blue Logic, “Embedded SRAM Selection Guide</venue><venType>CONFERENCE</venType><year>2002</year><raw>IBM Blue Logic, “Embedded SRAM Selection Guide,” November 2002.</raw><contexts><context>emory blocks, 18Kb each with 36-bit wide data paths for a total of over 10Mb of embedded memory [34]. Current ASIC standard cell libraries offer dual- and quad-port embedded SRAMs operating at 625MHz [35]. It is standard practice to utilize several embedded memories in parallel in order to achieve wide data paths. Dual Data Rate (DDR) and Quad Data Rate (QDR) SRAM technologies provide high bandwidth i</context></contexts></citation><citation id="28607"><venue>Micron Technology Inc., “256Mb Double Data Rate (DDR) SDRAM.” Datasheet</venue><venType>CONFERENCE</venType><year>2002</year><raw>Micron Technology Inc., “256Mb Double Data Rate (DDR) SDRAM.” Datasheet, October 2002.</raw><contexts><context>ed memories in parallel in order to achieve wide data paths. Dual Data Rate (DDR) and Quad Data Rate (QDR) SRAM technologies provide high bandwidth interfaces to several mega-bytes of off-chip memory [21, 36]. Network processors also provide a flexible platform for implementing packet classification techniques [37, 17, 38]. A number of current generation processors provide hardware assists for packet clas</context></contexts></citation><citation id="28608"><authors>P Crowley,M Franklin,H Hadimioglu,P Onufryk</authors><venue>Network Processor Design: Issues and Practices</venue><venType>CONFERENCE</venType><year>2002</year><publisher>Morgan Kaufmann</publisher><volume>1</volume><raw>P. Crowley, M. Franklin, H. Hadimioglu, and P. Onufryk, Network Processor Design: Issues and Practices, vol. 1. Morgan Kaufmann, 2002.</raw><contexts><context>technologies provide high bandwidth interfaces to several mega-bytes of off-chip memory [21, 36]. Network processors also provide a flexible platform for implementing packet classification techniques [37, 17, 38]. A number of current generation processors provide hardware assists for packet classification, interfaces to TCAM, and/or special instructions for search applications such as hash functions. Acknowle</context></contexts></citation><citation id="28609"><authors>N Shah</authors><title>Understanding network processors</title><venType>TECHREPORT</venType><year>2001</year><tech>Tech. Rep. Version 1.0</tech><raw>N. Shah, “Understanding network processors,” Tech. Rep. Version 1.0, EECS, University of California, Berkeley, September 2001.</raw><contexts><context>technologies provide high bandwidth interfaces to several mega-bytes of off-chip memory [21, 36]. Network processors also provide a flexible platform for implementing packet classification techniques [37, 17, 38]. A number of current generation processors provide hardware assists for packet classification, interfaces to TCAM, and/or special instructions for search applications such as hash functions. Acknowle</context></contexts></citation></citations><fileInfo><url>http://www.arl.wustl.edu/Publications/2000-04/wucse-2004-24.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>c3069d8e8d473249bd35f121cebfd5389f745012</sha1></checkSum></checkSums></fileInfo></document>