<document id="10.1.1.1.1525"><clusterid>64580</clusterid><title src="INFERENCE">An overview of jml tools and applications</title><abstract src="user correction - Legacy Corrections">The Java Modeling Language (JML) can be used to specify  the detailed design of Java classes and interfaces by adding annotations  to Java source files. The aim of JML is to provide a specification language  that is easy to use for Java programmers and that is supported by a wide  range of tools for specification type-checking, runtime debugging, static  analysis, and verification.</abstract><year src="user correction - Legacy Corrections">2003</year><venue src="INFERENCE">International Journal on Software Tools for Technology Transfer</venue><venType src="INFERENCE">CONFERENCE</venType><pages src="INFERENCE">73--89</pages><volume src="INFERENCE">7</volume><publisher src="INFERENCE">Elsevier</publisher><tech src="INFERENCE">Technical Report NII-R0309</tech><keywords><keyword id="856700">formal specification</keyword><keyword id="856701">Java</keyword><keyword id="856702">runtime assertion checking</keyword><keyword id="856703">static checking</keyword></keywords><authors><author id="2387296"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Lilian Burdy</name><affil src="SVM HeaderParse 0.2">1 GEMPLUS Research Lab, Gémenos</affil><address src="SVM HeaderParse 0.1">France</address><order src="null">1</order></author><author id="2387297"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Yoonsik Cheon</name><order src="null">2</order></author><author id="2387298"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">David Cok</name><order src="null">3</order></author><author id="2387299"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Michael D. Ernst</name><order src="null">4</order></author><author id="2387300"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Joe Kiniry</name><order src="null">5</order></author><author id="2387301"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Gary T. Leavens</name><order src="null">6</order></author><author id="2387302"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">K. Rustan</name><order src="null">7</order></author><author id="2387303"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">M. Leino</name><order src="null">8</order></author><author id="2387304"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Erik Poll</name><affil src="SVM HeaderParse 0.2">6 Microsoft Research, Redmond, WA</affil><address src="SVM HeaderParse 0.1">USA</address><order src="null">9</order></author></authors><citations src="ParsCit 1.0"><citation id="28664"><clusterid>664</clusterid><authors>J-R Abrial</authors><title>The B-Book: Assigning Programs to Meanings</title><year>1996</year><publisher>Cambridge University Press</publisher><raw>J.-R. Abrial. The B-Book: Assigning Programs to Meanings. Cambridge University Press, 1996.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28665"><clusterid>665</clusterid><authors>Sergio Antoy,Dick Hamlet</authors><title>Automatically checking an implementation against its formal specification</title><venue>IEEE Transactions on Software Engineering</venue><venType>JOURNAL</venType><year>2000</year><volume>26</volume><raw>Sergio Antoy and Dick Hamlet. Automatically checking an implementation against its formal specification. IEEE Transactions on Software Engineering, 26(1):55–69, January 2000. 14 Lilian Burdy et al.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28666"><clusterid>666</clusterid><authors>D Bartetzko,C Fischer,M Moller,H Wehrheim</authors><title>Jass — Java with assertions</title><venue>In Workshop on Runtime Verification at CAV’01, 2001. Published in ENTCS, K. Havelund and</venue><venType>CONFERENCE</venType><pages>200--1</pages><editors>G. Rosu (eds</editors><volume>55</volume><raw>D. Bartetzko, C. Fischer, M. Moller, and H. Wehrheim. Jass — Java with assertions. In Workshop on Runtime Verification at CAV’01, 2001. Published in ENTCS, K. Havelund and G. Rosu (eds.), 55(2), 2001.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28667"><clusterid>667</clusterid><authors>Kent Beck,Erich Gamma</authors><title>Test infected: Programmers love writing tests</title><venue>Java Report</venue><venType>JOURNAL</venType><year>1998</year><volume>3</volume><raw>Kent Beck and Erich Gamma. Test infected: Programmers love writing tests. Java Report, 3(7):37–50, 1998.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28668"><clusterid>668</clusterid><authors>Cees-Bart Breunesse,Joachim van den Berg,Bart Jacobs</authors><title>Specifying and verifying a decimal representation in Java for smart cards</title><venue>AMAST’02, number 2422 in LNCS</venue><venType>CONFERENCE</venType><year>2002</year><pages>304--318</pages><editors>In H. Kirchner and C. Ringeissen, editors</editors><publisher>Springer</publisher><raw>Cees-Bart Breunesse, Joachim van den Berg, and Bart Jacobs. Specifying and verifying a decimal representation in Java for smart cards. In H. Kirchner and C. Ringeissen, editors, AMAST’02, number 2422 in LNCS, pages 304–318. Springer, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28669"><clusterid>669</clusterid><authors>Achim D Brucker,Burkhart Wolff</authors><title>A proposal for a formal OCL semantics in Isabelle/HOL</title><venue>In César Muñoz, Sophiène Tahar, and Víctor Carreño, editors, TPHOL’02, volume 2410 of LNCS</venue><venType>CONFERENCE</venType><year>2002</year><pages>99--114</pages><publisher>Springer</publisher><raw>Achim D. Brucker and Burkhart Wolff. A proposal for a formal OCL semantics in Isabelle/HOL. In César Muñoz, Sophiène Tahar, and Víctor Carreño, editors, TPHOL’02, volume 2410 of LNCS, pages 99–114. Springer, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28670"><clusterid>8918536</clusterid><authors>JACK</authors><title>Java Applet Correctness Kit). At http://www.gemplus.com/smart/r d/trends/jack.html</title><year>2002</year><raw>Lilian Burdy, Jean-Louis Lanet, and Antoine Requet. JACK (Java Applet Correctness Kit). At http://www.gemplus.com/smart/r d/trends/jack.html, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28671"><clusterid>688</clusterid><authors></authors><title>Néstor Cataño and Marieke Huisman. Formal specification of Gemplus’s electronic purse case study</title><venue>FME 2002, volume LNCS 2391</venue><venType>CONFERENCE</venType><year>2002</year><pages>272--289</pages><editors>In L. H. Eriksson and P. A. Lindsay, editors</editors><publisher>Springer</publisher><raw>Néstor Cataño and Marieke Huisman. Formal specification of Gemplus’s electronic purse case study. In L. H. Eriksson and P. A. Lindsay, editors, FME 2002, volume LNCS 2391, pages 272–289. Springer, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28672"><clusterid>671</clusterid><authors>Néstor Cataño,Marieke Huisman</authors><title>CHASE: A static checker for JML’s assignable clause</title><venue>VMCAI: Verification, Model Checking, and Abstract Interpretation, volume 2575 of LNCS</venue><venType>CONFERENCE</venType><year>2003</year><pages>26--40</pages><editors>In Lenore D. Zuck, Paul C. Attie, Agostino Cortesi, and Supratik Mukhopadhyay, editors</editors><publisher>Springer</publisher><raw>Néstor Cataño and Marieke Huisman. CHASE: A static checker for JML’s assignable clause. In Lenore D. Zuck, Paul C. Attie, Agostino Cortesi, and Supratik Mukhopadhyay, editors, VMCAI: Verification, Model Checking, and Abstract Interpretation, volume 2575 of LNCS, pages 26–40. Springer, 2003.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28673"><clusterid>672</clusterid><authors>Yoonsik Cheon,Gary T Leavens</authors><title>A runtime assertion checker for the Java Modeling Language (JML</title><venue>the International Conference on Software Engineering Research and Practice (SERP ’02</venue><venType>CONFERENCE</venType><year>2002</year><pages>322--328</pages><editors>In Hamid R. Arabnia and Youngsong Mun, editors</editors><publisher>CSREA Press</publisher><raw>Yoonsik Cheon and Gary T. Leavens. A runtime assertion checker for the Java Modeling Language (JML). In Hamid R. Arabnia and Youngsong Mun, editors, the International Conference on Software Engineering Research and Practice (SERP ’02), pages 322–328. CSREA Press, June 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28674"><clusterid>673</clusterid><authors>Yoonsik Cheon,Gary T Leavens</authors><title>A simple and practical approach to unit testing: The JML and JUnit</title><venue>ECOOP 2002, volume 2374 of LNCS</venue><venType>CONFERENCE</venType><year>2002</year><pages>231--255</pages><editors>way. In Boris Magnusson, editor</editors><publisher>Springer</publisher><raw>Yoonsik Cheon and Gary T. Leavens. A simple and practical approach to unit testing: The JML and JUnit way. In Boris Magnusson, editor, ECOOP 2002, volume 2374 of LNCS, pages 231–255. Springer, June 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28675"><clusterid>674</clusterid><authors>Yoonsik Cheon,Gary T Leavens,Murali Sitaraman,Stephen Edwards</authors><title>Model variables: Cleanly supporting abstraction in design by contract</title><venType>TECHREPORT</venType><year>2003</year><tech>Technical Report 03-10</tech><raw>Yoonsik Cheon, Gary T. Leavens, Murali Sitaraman, and Stephen Edwards. Model variables: Cleanly supporting abstraction in design by contract. Technical Report 03-10, Department of Computer Science, Iowa State University, April 2003. Available from archives.cs.iastate.edu.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28676"><clusterid>675</clusterid><authors>Krishna Kishore Dhara,Gary T Leavens</authors><title>Forcing behavioral subtyping through specification inheritance</title><venue>In 18th International Conference on Software Engineering</venue><venType>CONFERENCE</venType><year>1996</year><pages>258--267</pages><publisher>IEEE Computer Society Press</publisher><raw>Krishna Kishore Dhara and Gary T. Leavens. Forcing behavioral subtyping through specification inheritance. In 18th International Conference on Software Engineering, pages 258–267. IEEE Computer Society Press, 1996.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28677"><clusterid>676</clusterid><authors>Michael D Ernst,Jake Cockrell,William G Griswold,David Notkin</authors><title>Dynamically discovering likely program invariants to support program evolution</title><venue>IEEE Transactions on Software Engineering</venue><venType>JOURNAL</venType><pages>200--1</pages><volume>27</volume><raw>Michael D. Ernst, Jake Cockrell, William G. Griswold, and David Notkin. Dynamically discovering likely program invariants to support program evolution. IEEE Transactions on Software Engineering, 27(2):1–25, 2001.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28678"><clusterid>677</clusterid><authors>Michael D Ernst,Adam Czeisler,William G Griswold,David Notkin</authors><title>Quickly detecting relevant program invariants</title><venue>In ICSE 2000, Proceedings of the 22nd International Conference on Software Engineering</venue><venType>CONFERENCE</venType><year>2000</year><pages>449--458</pages><raw>Michael D. Ernst, Adam Czeisler, William G. Griswold, and David Notkin. Quickly detecting relevant program invariants. In ICSE 2000, Proceedings of the 22nd International Conference on Software Engineering, pages 449–458, 2000.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28679"><clusterid>678</clusterid><authors>Houdini</authors><title>an annotation assistant for esc/java</title><venue>FME 2001, volume LNCS 2021</venue><venType>CONFERENCE</venType><year>2001</year><pages>500--517</pages><editors>In J. N. Oliveira and P. Zave, editors</editors><publisher>Springer</publisher><raw>Cormac Flanagan and K. Rustan M. Leino. Houdini, an annotation assistant for esc/java. In J. N. Oliveira and P. Zave, editors, FME 2001, volume LNCS 2021, pages 500–517. Springer, 2001.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28680"><clusterid>679</clusterid><authors>Cormac Flanagan,K Rustan M Leino,Mark Lillibridge,Greg Nelson,James B Saxe</authors><title>Raymie Stata. Extended static checking for Java</title><venue>In ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI’2002</venue><venType>CONFERENCE</venType><year>2002</year><pages>234--245</pages><raw>Cormac Flanagan, K. Rustan M. Leino, Mark Lillibridge, Greg Nelson, James B. Saxe, and Raymie Stata. Extended static checking for Java. In ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI’2002), pages 234–245, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28681"><clusterid>680</clusterid><authors>Lisa Friendly</authors><title>The design of distributed hyperlinked programming documentation</title><venue>Overview of JML Tools and Applications 15</venue><venType>CONFERENCE</venType><year>1995</year><pages>151--173</pages><editors>In S. Fraïssè, F. Garzotto, T. Isakowitz, J. Nanard, and M. Nanard, editors</editors><publisher>Springer</publisher><volume>95</volume><raw>Lisa Friendly. The design of distributed hyperlinked programming documentation. In S. Fraïssè, F. Garzotto, T. Isakowitz, J. Nanard, and M. Nanard, editors, IWHD’95, pages 151–173. Springer, 1995. An Overview of JML Tools and Applications 15</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28682"><clusterid>681</clusterid><authors>John V Guttag,James J Horning</authors><title>et al. Larch: Languages and Tools for Formal Specification</title><year>1993</year><publisher>Springer</publisher><pubAddress>New York, NY</pubAddress><raw>John V. Guttag, James J. Horning, et al. Larch: Languages and Tools for Formal Specification. Springer, New York, NY, 1993.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28683"><clusterid>682</clusterid><authors>Marieke Huisman</authors><title>Reasoning about Java Programs in higher order logic with PVS and Isabelle. IPA dissertation series</title><year>2001</year><pages>2001--03</pages><pubAddress>Holland</pubAddress><raw>Marieke Huisman. Reasoning about Java Programs in higher order logic with PVS and Isabelle. IPA dissertation series, 2001-03, University of Nijmegen, Holland, February 2001.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28684"><clusterid>683</clusterid><authors>Bart Jacobs</authors><title>Weakest precondition reasoning for Java programs with JML annotations</title><venue>JLAP</venue><venType>JOURNAL</venType><volume>2002</volume><raw>Bart Jacobs. Weakest precondition reasoning for Java programs with JML annotations. JLAP, 2002. To appear.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28685"><clusterid>684</clusterid><authors>Bart Jacobs,Erik Poll</authors><title>A logic for the Java Modeling Language JML</title><venue>Fundamental Approaches to Software Engineering (FASE), volume 2029 of LNCS</venue><venType>CONFERENCE</venType><year>2001</year><pages>284--299</pages><editors>In H. Hussmann, editor</editors><publisher>Springer</publisher><raw>Bart Jacobs and Erik Poll. A logic for the Java Modeling Language JML. In H. Hussmann, editor, Fundamental Approaches to Software Engineering (FASE), volume 2029 of LNCS, pages 284–299. Springer, 2001.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28686"><clusterid>685</clusterid><authors>Bart Jacobs,Joachim van den Berg,Marieke Huisman,Martijn van Berkum,Ulrich Hensel,Hendrik Tews</authors><title>Reasoning about Java classes (preliminary report</title><venue>In OOPSLA’98, volume 33(10) of ACM SIGPLAN Notices</venue><venType>CONFERENCE</venType><year>1998</year><pages>329--340</pages><publisher>ACM</publisher><raw>Bart Jacobs, Joachim van den Berg, Marieke Huisman, Martijn van Berkum, Ulrich Hensel, and Hendrik Tews. Reasoning about Java classes (preliminary report). In OOPSLA’98, volume 33(10) of ACM SIGPLAN Notices, pages 329–340. ACM, October 1998.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28687"><clusterid>686</clusterid><authors>Reto Kramer</authors><title>iContract – the Java design by contract tool</title><venue>TOOLS 26: Technology of Object-Oriented Languages and Systems, Los Alamitos, California</venue><venType>CONFERENCE</venType><year>1998</year><pages>295--307</pages><raw>Reto Kramer. iContract – the Java design by contract tool. TOOLS 26: Technology of Object-Oriented Languages and Systems, Los Alamitos, California, pages 295– 307, 1998.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28688"><clusterid>687</clusterid><authors>Gary T Leavens,Albert L Baker,Clyde Ruby</authors><title>JML: A notation for detailed design</title><venue>Behavioral Specifications of Businesses and Systems</venue><venType>CONFERENCE</venType><year>1999</year><pages>175--188</pages><editors>In Haim Kilov, Bernhard Rumpe, and Ian Simmonds, editors</editors><publisher>Kluwer Academic Publishers</publisher><pubAddress>Boston</pubAddress><raw>Gary T. Leavens, Albert L. Baker, and Clyde Ruby. JML: A notation for detailed design. In Haim Kilov, Bernhard Rumpe, and Ian Simmonds, editors, Behavioral Specifications of Businesses and Systems, pages 175–188. Kluwer Academic Publishers, Boston, 1999.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28689"><clusterid>688</clusterid><authors>Gary T Leavens,Albert L Baker,Clyde Ruby</authors><title>Preliminary design of JML: A behavioral interface specification language for Java</title><venType>TECHREPORT</venType><year>2003</year><tech>Technical Report 9806u</tech><raw>Gary T. Leavens, Albert L. Baker, and Clyde Ruby. Preliminary design of JML: A behavioral interface specification language for Java. Technical Report 9806u, Iowa State University, Department of Computer Science, April 2003. See www.jmlspecs.org.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28690"><clusterid>689</clusterid><authors>Gary T Leavens,Yoonsik Cheon,Curtis Clifton,Clyde Ruby,David R Cok</authors><title>How the design of JML accommodates both runtime assertion checking and formal verification</title><venue>Department of Computer Science, Iowa State University</venue><venType>TECHREPORT</venType><year>2003</year><pubAddress>Ames, Iowa, 50011</pubAddress><tech>Technical Report 03-04</tech><raw>Gary T. Leavens, Yoonsik Cheon, Curtis Clifton, Clyde Ruby, and David R. Cok. How the design of JML accommodates both runtime assertion checking and formal verification. Technical Report 03-04, Department of Computer Science, Iowa State University, Ames, Iowa, 50011, March 2003. To appear in the proceedings of FMCO</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28691"><clusterid>690</clusterid><authors>K Rustan M Leino,Greg Nelson,James B Saxe</authors><title>ESC/Java user’s manual</title><venue>Technical Note 2000-002, Compaq SRC</venue><venType>CONFERENCE</venType><year>2000</year><raw>K. Rustan M. Leino, Greg Nelson, and James B. Saxe. ESC/Java user’s manual. Technical Note 2000-002, Compaq SRC, October 2000.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28692"><clusterid>691</clusterid><authors>K Rustan M Leino,James B Saxe</authors><title>Raymie Stata. Checking Java programs via guarded commands</title><venue>Technical Note 1999-002, Compaq SRC</venue><venType>CONFERENCE</venType><year>1999</year><raw>K. Rustan M. Leino, James B. Saxe, and Raymie Stata. Checking Java programs via guarded commands. Technical Note 1999-002, Compaq SRC, May 1999.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28693"><clusterid>692</clusterid><authors>Barbara Liskov,Jeannette Wing</authors><title>A behavioral notion of subtyping</title><venue>ACM Transactions on Programming Languages and Systems</venue><venType>JOURNAL</venType><volume>16</volume><raw>Barbara Liskov and Jeannette Wing. A behavioral notion of subtyping. ACM Transactions on Programming Languages and Systems, 16(6):1811–1841, November</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28694"><clusterid>693</clusterid><authors>Claude Marché,Christine Paulin,Xavier Urbain</authors><title>The Krakatoa tool for JML/Java program certification. Available at http://krakatoa.lri.fr</title><year>2003</year><raw>Claude Marché, Christine Paulin, and Xavier Urbain. The Krakatoa tool for JML/Java program certification. Available at http://krakatoa.lri.fr, 2003.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28695"><clusterid>694</clusterid><authors>Renaud Marlet,Daniel Le Metayer</authors><title>Security properties and Java Card specificities to be studied in the SecSafe project</title><venType>TECHREPORT</venType><year>2001</year><tech>Technical Report SECSAFE-TL-006, Trusted Logic</tech><raw>Renaud Marlet and Daniel Le Metayer. Security properties and Java Card specificities to be studied in the SecSafe project. Technical Report SECSAFE-TL-006, Trusted Logic, August 2001. Available from http://www.doc.ic.ac.uk/˜siveroni/secsafe/docs.html.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28696"><clusterid>695</clusterid><authors>Bertrand Meyer</authors><title>Object-oriented Software Construction</title><year>1997</year><publisher>Prentice Hall</publisher><pubAddress>New York, NY</pubAddress><raw>Bertrand Meyer. Object-oriented Software Construction. Prentice Hall, New York, NY, second edition, 1997.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28697"><clusterid>696</clusterid><authors>Jeremy W Nimmer,Michael D Ernst</authors><title>Automatic generation of program specifications</title><venue>In ISSTA 2002, International Symposium on Software Testing and Analysis</venue><venType>CONFERENCE</venType><year>2002</year><pages>232--242</pages><pubAddress>Rome, Italy</pubAddress><raw>Jeremy W. Nimmer and Michael D. Ernst. Automatic generation of program specifications. In ISSTA 2002, International Symposium on Software Testing and Analysis, pages 232–242, Rome, Italy, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28698"><clusterid>697</clusterid><authors>Jeremy W Nimmer,Michael D Ernst</authors><title>Invariant inference for static checking: An empirical evaluation</title><venue>In ACM SIGSOFT 10th International Symposium on the Foundations of Software Engineering (FSE 2002</venue><venType>CONFERENCE</venType><year>2002</year><pages>11--20</pages><raw>Jeremy W. Nimmer and Michael D. Ernst. Invariant inference for static checking: An empirical evaluation. In ACM SIGSOFT 10th International Symposium on the Foundations of Software Engineering (FSE 2002), pages 11–20, 2002. 16 Lilian Burdy et al.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28699"><clusterid>698</clusterid><authors>S Owre,S Rajan,J M Rushby,N Shankar,M Srivas</authors><title>PVS: Combining specification, proof checking, and model checking</title><venue>Computer Aided Verification, number 1102 in LNCS</venue><venType>CONFERENCE</venType><pages>411--414</pages><editors>In R. Alur and T.A. Henzinger, editors</editors><publisher>Springer</publisher><raw>S. Owre, S. Rajan, J.M. Rushby, N. Shankar, and M. Srivas. PVS: Combining specification, proof checking, and model checking. In R. Alur and T.A. Henzinger, editors, Computer Aided Verification, number 1102 in LNCS, pages 411–414. Springer,</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28700"><clusterid>699</clusterid><authors>Dennis K Peters,David Lorge</authors><title>Parnas. Using test oracles generated from program documentation</title><venue>IEEE Transactions on Software Engineering</venue><venType>JOURNAL</venType><volume>24</volume><raw>Dennis K. Peters and David Lorge Parnas. Using test oracles generated from program documentation. IEEE Transactions on Software Engineering, 24(3):161–173,</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28701"><clusterid>700</clusterid><authors>Erik Poll,Pieter Hartel,Eduard de Jong</authors><title>A Java reference model of transacted memory for smart cards</title><venue>In Smart Card Research and Advanced Application Conference (CARDIS’2002</venue><venType>CONFERENCE</venType><year>2002</year><pages>75--86</pages><pubAddress>USENIX</pubAddress><raw>Erik Poll, Pieter Hartel, and Eduard de Jong. A Java reference model of transacted memory for smart cards. In Smart Card Research and Advanced Application Conference (CARDIS’2002), pages 75–86. USENIX, 2002.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28702"><clusterid>701</clusterid><authors>Jim Rumbaugh,Ivar Jacobson,Grady Booch</authors><title>The Unified Modeling Language Reference Manual</title><year>1998</year><publisher>Addison-Wesley Publishing Company</publisher><raw>Jim Rumbaugh, Ivar Jacobson, and Grady Booch. The Unified Modeling Language Reference Manual. Addison-Wesley Publishing Company, 1998.</raw><paperid>10.1.1.1.1525</paperid></citation><citation id="28703"><clusterid>702</clusterid><authors>Jos Warmer,Anneke Kleppe</authors><title>The Object Constraint Language: Precise Modeling with UML</title><year>1999</year><publisher>Addison-Wesley Publishing Company</publisher><raw>Jos Warmer and Anneke Kleppe. The Object Constraint Language: Precise Modeling with UML. Addison-Wesley Publishing Company, 1999.</raw><paperid>10.1.1.1.1525</paperid></citation></citations><fileInfo><crawldate>Nov 19, 2007</crawldate><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><urls><url>http://www.gemplus.com/smart/r_d/publications/pdf/BCC_03jm.pdf</url></urls></fileInfo></document>