<document id="10.1.1.1.1591"><title src="SVM HeaderParse 0.1">OCL as a Core UML Transformation Language WITUML 2002 – Position Paper</title><abstract src="SVM HeaderParse 0.1">Software developers spend most of their time modifying and maintaining existing products. In a recent article [7] we focused on the definition of UML refactorings (i.e. behavior-preserving transformations) specified by meta-level OCL pre- &amp; post-conditions. In this paper we propose to extend OCL with model modification features, thus allowing to implement model transformations at the same abstraction level as their specification. We then describe the global architecture of a model manipulation tool based on an OCL core. 1</abstract><keywords></keywords><authors><author id="4423"><name src="SVM HeaderParse 0.1">Damien Pollet</name><address src="SVM HeaderParse 0.1">F-35042 Rennes cedex, France</address><email src="SVM HeaderParse 0.1">dpollet @irisa.fr</email><order>1</order></author><author id="4424"><name src="SVM HeaderParse 0.1">Didier Vojtisek</name><address src="SVM HeaderParse 0.1">F-35042 Rennes cedex, France</address><email src="SVM HeaderParse 0.1">dvojtise @irisa.fr</email><order>2</order></author><author id="4425"><name src="SVM HeaderParse 0.1">Jean-marc Jézéquel</name><address src="SVM HeaderParse 0.1">F-35042 Rennes cedex, France</address><email src="SVM HeaderParse 0.1">jezequel@irisa.fr</email><order>3</order></author></authors><citations src="ParsCit 1.0"><citation id="29886"><title>Initial submission to OMG RFP’s ad/00-09-01 &amp; ad/00-09-03. OMG document ad/01-08-35</title><year>2001</year><raw>Initial submission to OMG RFP’s ad/00-09-01 &amp; ad/00-09-03. OMG document ad/01-08-35, August 2001.</raw><contexts><context>age: while it is quite useful to navigate the model or to express constraints between model elements, it cannot be used to effectively modify a model. One of the submissions to the OMG UML/OCL 2 RFPs [1] proposes to extend the expression language with action features. This is particularly interesting as it would allow to define model transformations in OCL along with their pre/post-conditions: contex</context></contexts></citation><citation id="29887"><authors>Xavier Blanc</authors><title>Échanges de spécifications hétérogènes et réparties</title><venType>TECHREPORT</venType><year>2001</year><tech>PhD thesis</tech><raw>Xavier Blanc. Échanges de spécifications hétérogènes et réparties. PhD thesis, Université Pierre &amp; Marie Curie – Paris VI, November 2001.</raw></citation><citation id="29888"><authors>A Clark,A Evans,S Kent,P Sammut</authors><title>The mmf approach to engineering object-oriented design languages</title><raw>A. Clark, A. Evans, S. Kent, and P. Sammut. The mmf approach to engineering object-oriented design languages.</raw></citation><citation id="29889"><authors>William F Opdyke</authors><title>Refactoring Object-Oriented Frameworks</title><venType>TECHREPORT</venType><year>1992</year><tech>PhD thesis</tech><raw>William F. Opdyke. Refactoring Object-Oriented Frameworks. PhD thesis, University of Illinois, Urbana-Champaign, 1992. Tech. Report UIUCDCSR-92-1759.</raw><contexts><context>source code. 2.2 OCL description In [7] we focused on the definition of a special kind of transformations: UML refactorings, i.e. the adaptation to UML of Opdyke’s behavior-preserving transformations [4]. We specified each transformation using pre- and post-conditions, expressed as OCL constraints at the metamodel level. This is illustrated in the following example. Example: attribute privatization T</context></contexts></citation><citation id="29890"><authors>Mickaël Peltier</authors><title>Transformation entre un profil UML et un métamodèle MOF</title><venue>In Michel Dao and Marianne Huchard, editors, Langages et Modèles à Objets, volume 8 of L’Objet</venue><venType>CONFERENCE</venType><raw>Mickaël Peltier. Transformation entre un profil UML et un métamodèle MOF. In Michel Dao and Marianne Huchard, editors, Langages et Modèles à Objets, volume 8 of L’Objet.</raw><contexts><context>or through an XSLT generation phase. Dedicated languages address these problems by providing specialized constructs or paradigms; the model is then transformed directly or through compilation to XSLT [5]. Over other dedicated transformation languages, OCL has the advantage of being integrated and used as an expression language in the UML norm. Modeling and transformations can then be done using only </context></contexts></citation><citation id="29891"><authors>Mickaël Peltier,Jean Bézivin,Gabriel Guillaume</authors><title>Mtrans: A general framework, based on XSLT, for model transformations. WTUML position paper</title><year>2001</year><raw>Mickaël Peltier, Jean Bézivin, and Gabriel Guillaume. Mtrans: A general framework, based on XSLT, for model transformations. WTUML position paper, 2001.</raw></citation><citation id="29892"><authors>Gerson Sunyé,Damien Pollet,Yves</authors><title>Le Traon, and Jean-Marc Jézéquel. Refactoring uml models</title><venue>In Proceedings of UML 2001, volume 2185 of LNCS</venue><venType>CONFERENCE</venType><year>2001</year><pages>134--148</pages><publisher>Springer Verlag</publisher><raw>Gerson Sunyé, Damien Pollet, Yves Le Traon, and Jean-Marc Jézéquel. Refactoring uml models. In Proceedings of UML 2001, volume 2185 of LNCS, pages 134–148. Springer Verlag, 2001.</raw><contexts><context>ennes cedex, France email: {dpollet, dvojtise, jezequel}@irisa.fr 8th April 2002 Abstract Software developers spend most of their time modifying and maintaining existing products. In a recent article [7] we focused on the definition of UML refactorings (i.e. behavior-preserving transformations) specified by meta-level OCL pre- &amp; post-conditions. In this paper we propose to extend OCL with model modif</context><context> reverse engineering; Endomorphic i.e. from UML to UML, such as refinement, refactoring or highlevel design; Exomorphic: from UML to other languages such as XMI or source code. 2.2 OCL description In [7] we focused on the definition of a special kind of transformations: UML refactorings, i.e. the adaptation to UML of Opdyke’s behavior-preserving transformations [4]. We specified each transformation u</context></contexts></citation></citations><fileInfo><url>http://www.irisa.fr/triskell/publis/2002/Pollet02a.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>a4f104f705991f443d0d67ad6165cc5ddc954e23</sha1></checkSum></checkSums></fileInfo></document>