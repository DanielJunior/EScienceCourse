<document id="10.1.1.1.1605"><title src="SVM HeaderParse 0.1">On Global Warming (Softening Global Constraints)</title><abstract src="SVM HeaderParse 0.1">Abstract. We describe soft versions of the global cardinality constraint and the regular constraint, with efficient filtering algorithms maintaining domain consistency. For both constraints, the softening is achieved by augmenting the underlying graph. The softened constraints can be used to extend the meta-constraint framework for over-constrained problems proposed by Petit, Régin and Bessière. 1</abstract><keywords></keywords><authors><author id="4458"><name src="SVM HeaderParse 0.1">Willem Jan Van Hoeve</name><address src="SVM HeaderParse 0.1">1 CWI, P.O. Box 94079, 1090 GB Amsterdam, The Netherlands</address><email src="SVM HeaderParse 0.1">W.J.van.Hoeve@cwi.nl</email><order>1</order></author><author id="4459"><name src="SVM HeaderParse 0.1">Gilles Pesant</name><address src="SVM HeaderParse 0.1">1 CWI, P.O. Box 94079, 1090 GB Amsterdam, The Netherlands</address><email src="SVM HeaderParse 0.1">pesant@crt.umontreal.ca</email><order>2</order></author><author id="4460"><name src="SVM HeaderParse 0.1">Louis-martin Rousseau</name><address src="SVM HeaderParse 0.1">1 CWI, P.O. Box 94079, 1090 GB Amsterdam, The Netherlands</address><email src="SVM HeaderParse 0.1">louism@crt.umontreal.ca</email><order>3</order></author></authors><citations src="ParsCit 1.0"><citation id="30078"><authors>R K Ahuja,T L Magnanti,J B Orlin</authors><title>Network Flows</title><year>1993</year><publisher>Prentice Hall</publisher><raw>R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. Network Flows. Prentice Hall, 1993.</raw><contexts><context>d min Dz ≥ cost(f) cost(f) + cost(SP(d, xi)) ≤ max Dz ∀(xi, d) ∈ AX→DX , where cost(SP(d, xi)) denotes the cost of a shortest path from d to xi in the residual graph G f val .sProof. From flow theory [1] we know that, given a minimum-cost flow f in Gval, if we enforce arc (xi, d) to be in a minimum-cost flow ˜ f in Gval, cost( ˜ f) = cost(f) + cost(SP(d, xi)) where SP(d, xi) is the shortest d − xi pa</context><context>al to max Dz. By the above fact, we only need to compute a shortest path from d to xi instead of a new minimumcost flow. � A minimum-cost flow f in Gval can be computed in O(m(m + n log n)) time (see [1]), where again m = �n i=1 |Di| and n = |X|. Compared to the complexity of the soft gcc[var], we have a factor m instead of n. This is because computing the flow for soft gcc[val] is dependent on the n</context></contexts></citation><citation id="30079"><authors>K R Apt</authors><title>Principles of Constraint Programming</title><publisher>Cambridge University Press</publisher><raw>K.R. Apt. Principles of Constraint Programming. Cambridge University Press,</raw><contexts><context>nstraints. Finally, a conclusion is given in Section 6.s2 Background We assume familiarity with the basic concepts of constraint programming. For a thorough explanation of constraint programming, see [2]. A constraint satisfaction problem (CSP) consists of a finite set of variables X = {x1, . . . , xn} with finite domains D = {D1, . . . , Dn} such that xi ∈ Di for all i, together with a finite set of</context></contexts></citation><citation id="30080"><authors>N Beldiceanu,M Carlsson,T Petit</authors><title>Deriving Filtering Algorithms from Constraint Checkers</title><venue>In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS</venue><venType>CONFERENCE</venType><year>2004</year><publisher>Springer</publisher><raw>N. Beldiceanu, M. Carlsson, and T. Petit. Deriving Filtering Algorithms from Constraint Checkers. In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS. Springer, 2004.</raw><contexts><context>ugh topological sorts because of the special structure of the graph. That computation can also be made incremental in the same way as in [12]. Recently, that same result was independently obtained in [3]. We however go further by considering edit distance, for which insertions and deletions are allowed as well. For deletions we need to allow “wasting” a value without changing the current state. To th</context></contexts></citation><citation id="30081"><authors>N Beldiceanu,T Petit</authors><title>Cost Evaluation of Soft Global Constraints</title><venue>In CPAIOR 2004: Proceedings of the First International Conference, volume 3011 of LNCS</venue><venType>CONFERENCE</venType><year>2004</year><pages>80--95</pages><publisher>Springer</publisher><raw>N. Beldiceanu and T. Petit. Cost Evaluation of Soft Global Constraints. In CPAIOR 2004: Proceedings of the First International Conference, volume 3011 of LNCS, pages 80–95. Springer, 2004.</raw><contexts><context>. This technique allows the resolution of over-constrained problem within traditional CP solvers. Comparatively few efforts have been invested in developing soft versions of common global constraints [14, 4, 9]. Global constraints are often key elements in successfully modeling real applications and being able to easily and effectively soften such constraints would yield a significant improvement in flexibi</context><context>constraint C, we introduce a function that measures the violation, and has the following form: violationC : D1 × · · · × Dn → N. This approach has been introduced in [14] and was developed further in [4]. There may be several natural ways to evaluate the degree to which a global constraint is violated and these are not equivalent usually. A standard measure is the variable-based cost: Definition 3 (V</context><context>ectly to the soft gcc[var]. The soft gcc[var] also inherits from the cost-gcc the time complexity of achieving domain consistency, being O(n(m + n log n)) where m = �n i=1 |Di| and n = |X|. Note that [4] also consider the variable-based cost measure for a different version of the soft gcc. Their version considers the parameters l and u to be variables too. Hence, the variable-based cost evaluation be</context></contexts></citation><citation id="30082"><authors>S Bistarelli</authors><title>Semirings for Soft Constraint Solving and Programming, volume 2962 of LNCS</title><year>2004</year><publisher>Springer</publisher><raw>S. Bistarelli. Semirings for Soft Constraint Solving and Programming, volume 2962 of LNCS. Springer, 2004.</raw><contexts><context>he previous ones since the aggregation operator is a min/max function instead of addition. Max-CSPs are typically encoded and solved with one of two generic paradigms: valued-CSPs [19] and semi-rings [5].sAnother approach to model and solve over-constrained problems involves Meta-Constraints [13]. The idea behind this technique is to introduce a set of domain variables Z that capture the violation co</context></contexts></citation><citation id="30083"><authors>D Dubois,H Fargier,H Prade</authors><title>The calculus of fuzzy restrictions as a basis for flexible constraint satisfaction</title><venue>In Proceedings of the Second IEEE International Conference on Fuzzy Systems</venue><venType>CONFERENCE</venType><year>1993</year><pages>1131--1136</pages><volume>2</volume><raw>D. Dubois, H. Fargier, and H. Prade. The calculus of fuzzy restrictions as a basis for flexible constraint satisfaction. In Proceedings of the Second IEEE International Conference on Fuzzy Systems, volume 2, pages 1131–1136, 1993.</raw><contexts><context>. The objective of the framework is the hierarchical satisfaction of the most important constraints, that is, the minimization of the highest preference level for a violated constraint. The Fuzzy-CSP [6, 7] is somewhat similar to the Possibilistic-CSP but here a preference is associated to each tuple of each constraint. A preference value of 0 means the constraint is highly violated and 1 stands for sat</context></contexts></citation><citation id="30084"><authors>H Fargier,J Lang,T Schiex</authors><title>Selecting preferred solutions in fuzzy constraint satisfaction problems</title><venue>In Proceedings of the first European Congress on Fuzzy and Intelligent Technologies</venue><venType>CONFERENCE</venType><year>1993</year><raw>H. Fargier, J. Lang, and T. Schiex. Selecting preferred solutions in fuzzy constraint satisfaction problems. In Proceedings of the first European Congress on Fuzzy and Intelligent Technologies, 1993.</raw><contexts><context>. The objective of the framework is the hierarchical satisfaction of the most important constraints, that is, the minimization of the highest preference level for a violated constraint. The Fuzzy-CSP [6, 7] is somewhat similar to the Possibilistic-CSP but here a preference is associated to each tuple of each constraint. A preference value of 0 means the constraint is highly violated and 1 stands for sat</context></contexts></citation><citation id="30085"><authors>R Freuder,M Wallace</authors><title>Partial Constraint Satisfaction</title><venue>Artificial Intelligence</venue><venType>JOURNAL</venType><year>1992</year><volume>58</volume><raw>R. Freuder and M. Wallace. Partial Constraint Satisfaction. Artificial Intelligence, 58:21–70, 1992.</raw><contexts><context>-constrained problems, mostly by introducing soft constraints that are allowed to be (partially) violated. The most well-known framework is the Partial Constraint Satisfaction Problem framework (PCSP [8]), which includes the Max-CSP framework that tries to maximize the number of satisfied constraints. Since in this framework all constraints are either violated or satisfied, this objective is equivale</context></contexts></citation><citation id="30086"><authors>W J van Hoeve</authors><title>A Hyper-Arc Consistency Algorithm for the Soft Alldifferent Constraint</title><venue>In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS</venue><venType>CONFERENCE</venType><publisher>Springer</publisher><raw>W.J. van Hoeve. A Hyper-Arc Consistency Algorithm for the Soft Alldifferent Constraint. In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS. Springer,</raw><contexts><context>. This technique allows the resolution of over-constrained problem within traditional CP solvers. Comparatively few efforts have been invested in developing soft versions of common global constraints [14, 4, 9]. Global constraints are often key elements in successfully modeling real applications and being able to easily and effectively soften such constraints would yield a significant improvement in flexibi</context><context>onsistency. When l = 0 in soft gcc[val](X, l, u, z), the arc set Aunderflow is empty. In that case, Gval has a particular structure, i.e. the only costs appear on arcs from DX to t. As pointed out in [9] for the soft alldifferent constraint, constraints with this structure can be checked for consistency in O(nm) time, and domain consistency can be achieved in O(m) time. The result is obtained by expl</context></contexts></citation><citation id="30087"><authors>J Larrosa</authors><title>Node and Arc Consistency in Weighted CSP</title><venue>In Proceedings of the Eighteenth National Conference on Artificial Intelligence</venue><venType>CONFERENCE</venType><year>2002</year><pages>48--53</pages><publisher>AAAI Press/The MIT Press</publisher><raw>J. Larrosa. Node and Arc Consistency in Weighted CSP. In Proceedings of the Eighteenth National Conference on Artificial Intelligence, pages 48–53. AAAI Press/The MIT Press, 2002.</raw><contexts><context>ed constraints. Since in this framework all constraints are either violated or satisfied, this objective is equivalent to minimizing the number of violations. It has been extended to the Weighted-CSP [10, 11], associating a degree of violation (not just a boolean value) to each constraint and minimizing the sum of all weighted violations. The Possibilistic-CSP [18] associates a preference to each constrai</context></contexts></citation><citation id="30088"><authors>In</authors><title>the quest of the best form of local consistency for Weighted CSP</title><venue>In Proceedings of the Eighteenth International Joint Conference on Artificial Intelligence</venue><venType>CONFERENCE</venType><year>2003</year><pages>239--244</pages><publisher>Morgan Kaufmann</publisher><raw>J. Larrosa and T. Schiex. In the quest of the best form of local consistency for Weighted CSP. In Proceedings of the Eighteenth International Joint Conference on Artificial Intelligence, pages 239–244. Morgan Kaufmann, 2003.</raw><contexts><context>ed constraints. Since in this framework all constraints are either violated or satisfied, this objective is equivalent to minimizing the number of violations. It has been extended to the Weighted-CSP [10, 11], associating a degree of violation (not just a boolean value) to each constraint and minimizing the sum of all weighted violations. The Possibilistic-CSP [18] associates a preference to each constrai</context></contexts></citation><citation id="30089"><authors>G Pesant</authors><title>A Regular Language Membership Constraint for Finite Sequences of Variables</title><venue>In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS</venue><venType>CONFERENCE</venType><publisher>Springer</publisher><raw>G. Pesant. A Regular Language Membership Constraint for Finite Sequences of Variables. In Proceedings of the Tenth International Conference on Principles and Practice of Constraint Programming (CP 2004), volume 3258 of LNCS. Springer,</raw><contexts><context>ten such constraints would yield a significant improvement in flexibility. In this paper we study two global constraints: the widely known global cardinality constraint (gcc) [15] and the new regular [12] constraint. For each of these we propose new violation measures and provide the corresponding filtering algorithms to achieve domain consistency. All the constraint softening is achieved by enriching</context><context>stency can be achieved in O(m) time. The result is obtained by exploiting the strongly connected components2 in Gval restricted to vertex sets X and DX. 4 Soft Regular Constraint A regular constraint [12] on a fixed-length sequence of finite-domain variables requires that the corresponding sequence of values taken by these variables belong to a given regular language. A deterministic finite automaton </context><context>directed u − v path in G for all u, v ∈ S.sDn ⊆ Σ. Under a regular language membership constraint regular(x, M), any sequence of values taken by the variables of x corresponds to a string in L(M). In [12], a domain consistency algorithm for the regular constraint processed the sequence x with the automaton M, building a layered directed multi-graph G = (N 1 , N 2 , . . . , N n+1 , A) where each layer </context><context>nal state in the last layer can be done in O(n |δ|) time 3 through topological sorts because of the special structure of the graph. That computation can also be made incremental in the same way as in [12]. Recently, that same result was independently obtained in [3]. We however go further by considering edit distance, for which insertions and deletions are allowed as well. For deletions we need to all</context></contexts></citation><citation id="30090"><authors>T Petit,J-C Régin,C Bessière</authors><title>Meta constraints on violations for over constrained problems</title><venue>In Proceedings of the 12th IEEE International Conference on Tools with Artificial Intelligence (ICTAI</venue><venType>CONFERENCE</venType><year>2000</year><pages>358--365</pages><raw>T. Petit, J.-C. Régin, and C. Bessière. Meta constraints on violations for over constrained problems. In Proceedings of the 12th IEEE International Conference on Tools with Artificial Intelligence (ICTAI), pages 358–365, 2000.</raw><contexts><context>x-CSPs are typically encoded and solved with one of two generic paradigms: valued-CSPs [19] and semi-rings [5].sAnother approach to model and solve over-constrained problems involves Meta-Constraints [13]. The idea behind this technique is to introduce a set of domain variables Z that capture the violation cost of each soft constraint. By correctly constraining these variables it is possible to replic</context><context>unicate. Even though there are many avenues for combining soft constraints, the objective almost always remains to minimize constraint violations. We propose here a small extension to the approach of [13], where meta-constraints on the cost variables of soft constraints are introduced. We illustrate this approach with the newly introduced soft gcc. Definition 12 (Soft global cardinality aggregator). L</context><context>{0, 1} |S| ) the MaxCSP approach can be easily obtained by setting l1 = 0, u1 = 0, violation(Z) = � d∈DZ overflow(Z, d) and reading the number of violations in zagg. The sgca could also be used as in [13] to enforce homogeneity (in a soft manner) or to define other violation measures like restricting the number of highly violated 3 |δ| refers to the number of transitions in the automaton.sconstraint. </context></contexts></citation><citation id="30091"><authors>T Petit,J-C Régin,C Bessière</authors><title>Specific Filtering Algorithms for Over Constrained Problems</title><venue>In Proceedings of the Seventh International Conference on Principles and Practice of Constraint Programming (CP 2001), volume 2239 of LNCS</venue><venType>CONFERENCE</venType><year>2001</year><pages>451--463</pages><publisher>Springer</publisher><raw>T. Petit, J.-C. Régin, and C. Bessière. Specific Filtering Algorithms for Over Constrained Problems. In Proceedings of the Seventh International Conference on Principles and Practice of Constraint Programming (CP 2001), volume 2239 of LNCS, pages 451–463. Springer, 2001.</raw><contexts><context>. This technique allows the resolution of over-constrained problem within traditional CP solvers. Comparatively few efforts have been invested in developing soft versions of common global constraints [14, 4, 9]. Global constraints are often key elements in successfully modeling real applications and being able to easily and effectively soften such constraints would yield a significant improvement in flexibi</context><context>g to some criteria. For each soft constraint C, we introduce a function that measures the violation, and has the following form: violationC : D1 × · · · × Dn → N. This approach has been introduced in [14] and was developed further in [4]. There may be several natural ways to evaluate the degree to which a global constraint is violated and these are not equivalent usually. A standard measure is the var</context></contexts></citation><citation id="30092"><authors>J-C Régin</authors><title>Generalized Arc Consistency for Global Cardinality Constraint</title><venue>In Proceedings of AAAI/IAAI</venue><venType>CONFERENCE</venType><pages>209--215</pages><publisher>AAAI Press/The MIT Press</publisher><volume>1</volume><raw>J.-C. Régin. Generalized Arc Consistency for Global Cardinality Constraint. In Proceedings of AAAI/IAAI, volume 1, pages 209–215. AAAI Press/The MIT Press,</raw><contexts><context>asily and effectively soften such constraints would yield a significant improvement in flexibility. In this paper we study two global constraints: the widely known global cardinality constraint (gcc) [15] and the new regular [12] constraint. For each of these we propose new violation measures and provide the corresponding filtering algorithms to achieve domain consistency. All the constraint softening</context><context>mum and maximum number of times each value in the union of their domains should be assigned to these variables. Régin developed a domain consistency algorithm for the gcc, making use of network flows [15]. A variant of the gcc is the costgcc, which can be seen as a weighted version of the gcc [16, 17]. For the cost-gcc a weight is assigned to each variable-value assignment and the goal is to satisfy t</context><context>flow f is defined as cost(f) = � w(a)f(a). a∈A A minimum-cost flow is a feasible s−t flow of minimum cost. The minimum-cost flow problem is the problem of finding such a minimum-cost flow. Theorem 1 ([15]). A solution to gcc(X, l, u) corresponds to a feasible s − t flow of value n in the graph G = (V, A) with vertex set and edge set where V = X ∪ DX ∪ {s, t} A = As→X ∪ AX→DX ∪ ADX →t, As→X = {(s, xi) </context></contexts></citation><citation id="30093"><authors>J-C Régin</authors><title>Arc Consistency for Global Cardinality Constraints with Costs</title><venue>In Proceedings of the Fifth International Conference on Principles and Practice of Constraint Programming (CP’99), volume 1713 of LNCS</venue><venType>CONFERENCE</venType><pages>390--404</pages><publisher>Springer</publisher><raw>J.-C. Régin. Arc Consistency for Global Cardinality Constraints with Costs. In Proceedings of the Fifth International Conference on Principles and Practice of Constraint Programming (CP’99), volume 1713 of LNCS, pages 390–404. Springer,</raw><contexts><context> these variables. Régin developed a domain consistency algorithm for the gcc, making use of network flows [15]. A variant of the gcc is the costgcc, which can be seen as a weighted version of the gcc [16, 17]. For the cost-gcc a weight is assigned to each variable-value assignment and the goal is to satisfy the gcc with minimum total cost. Throughout this section, we will use the following notation (unles</context><context>uction, all variables need to be assigned to a value and the cost function exactly measures the variable-based cost of violation. � The graph Gvar corresponds to a particular instance of the cost-gcc [16, 17]. Hence, we can apply the filtering procedures developed for that constraint directly to the soft gcc[var]. The soft gcc[var] also inherits from the cost-gcc the time complexity of achieving domain co</context></contexts></citation><citation id="30094"><authors>J-C Régin</authors><title>Cost-Based Arc Consistency for Global Cardinality Constraints</title><venue>Constraints</venue><venType>JOURNAL</venType><pages>200--2</pages><volume>7</volume><raw>J.-C. Régin. Cost-Based Arc Consistency for Global Cardinality Constraints. Constraints, 7:387–405, 2002.</raw><contexts><context> these variables. Régin developed a domain consistency algorithm for the gcc, making use of network flows [15]. A variant of the gcc is the costgcc, which can be seen as a weighted version of the gcc [16, 17]. For the cost-gcc a weight is assigned to each variable-value assignment and the goal is to satisfy the gcc with minimum total cost. Throughout this section, we will use the following notation (unles</context><context>uction, all variables need to be assigned to a value and the cost function exactly measures the variable-based cost of violation. � The graph Gvar corresponds to a particular instance of the cost-gcc [16, 17]. Hence, we can apply the filtering procedures developed for that constraint directly to the soft gcc[var]. The soft gcc[var] also inherits from the cost-gcc the time complexity of achieving domain co</context></contexts></citation><citation id="30095"><authors>T Schiex</authors><title>Possibilistic Constraint Satisfaction Problems or “How to handle soft constraints</title><venue>In Proceedings of the 8th Annual Conference on Uncertainty in Artificial Intelligence</venue><venType>CONFERENCE</venType><year>1992</year><pages>268--275</pages><publisher>Morgan Kaufmann</publisher><raw>T. Schiex. Possibilistic Constraint Satisfaction Problems or “How to handle soft constraints ?”. In Proceedings of the 8th Annual Conference on Uncertainty in Artificial Intelligence, pages 268–275. Morgan Kaufmann, 1992.</raw><contexts><context>as been extended to the Weighted-CSP [10, 11], associating a degree of violation (not just a boolean value) to each constraint and minimizing the sum of all weighted violations. The Possibilistic-CSP [18] associates a preference to each constraint (a real value between 0 and 1) representing its importance. The objective of the framework is the hierarchical satisfaction of the most important constraint</context></contexts></citation><citation id="30096"><authors>T Schiex,H Fargier,G Verfaillie</authors><title>Valued Constraint Satisfaction Problems: Hard and Easy Problems</title><venue>In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence</venue><venType>CONFERENCE</venType><year>1995</year><pages>631--639</pages><publisher>Morgan Kaufmann</publisher><raw>T. Schiex, H. Fargier, and G. Verfaillie. Valued Constraint Satisfaction Problems: Hard and Easy Problems. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, pages 631–639. Morgan Kaufmann, 1995.</raw><contexts><context>are different from the previous ones since the aggregation operator is a min/max function instead of addition. Max-CSPs are typically encoded and solved with one of two generic paradigms: valued-CSPs [19] and semi-rings [5].sAnother approach to model and solve over-constrained problems involves Meta-Constraints [13]. The idea behind this technique is to introduce a set of domain variables Z that captu</context></contexts></citation><citation id="30097"><authors>A Schrijver</authors><title>Combinatorial Optimization - Polyhedra and Efficiency</title><publisher>Springer</publisher><raw>A. Schrijver. Combinatorial Optimization - Polyhedra and Efficiency. Springer,</raw></citation></citations><fileInfo><url>http://homepages.cwi.nl/~wjvh/papers/softglob.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>f2141c7594968ce03a9f848290e86c3e5d4d0415</sha1></checkSum></checkSums></fileInfo></document>