<document id="10.1.1.1.1528"><title src="SVM HeaderParse 0.1">Data Transformation for Warehousing Web Data</title><abstract src="SVM HeaderParse 0.1">In order to analyze market trends and make reasonable business plans, a company’s local data is not sufficient. Decision making must also be based on information from suppliers, partners and competitors. This external data can be obtained from the Web in many cases, but must be integrated with the company’s own data, for example, in a data warehouse. To this end, Web data has to be mapped to the star schema of the warehouse. In this paper we propose a semi-automatic approach to support this transformation process. Our approach is based on the use a rooted labeled tree representation of Web data and the existing warehouse schema. Based on this common view we can compare source and target schemata to identify correspondences. We show how the correspondences guide the transformation to be accomplished automatically. We also explain the meaning of recursion and restructuring in mapping rules, which are the core of the transformation algorithm. 1</abstract><keywords></keywords><authors><author id="4248"><name src="SVM HeaderParse 0.1">Yan Zhu</name><address src="SVM HeaderParse 0.1">64283 Darmstadt, Germany</address><email src="SVM HeaderParse 0.1">�zhu @dvs1.informatik.tu-darmstadt.de</email><order>1</order></author><author id="4249"><name src="SVM HeaderParse 0.1">Christof Bornhövd</name><address src="SVM HeaderParse 0.1">64283 Darmstadt, Germany</address><email src="SVM HeaderParse 0.1">christof bornhoevd@hp.com</email><order>2</order></author><author id="4250"><name src="SVM HeaderParse 0.1">Alejandro P. Buchmann</name><address src="SVM HeaderParse 0.1">64283 Darmstadt, Germany</address><email src="SVM HeaderParse 0.1">buchmann�@dvs1.informatik.tu-darmstadt.de</email><order>3</order></author></authors><citations src="ParsCit 1.0"><citation id="28708"><authors>S Abiteboul,D Quass,J McHugh,J Widom,J L Wiener</authors><title>The Lorel Query Language for</title><venue>Semistructure Data, International Journal on Digital Libraries 1(1</venue><venType>CONFERENCE</venType><year>1997</year><pages>68--88</pages><raw>S. Abiteboul, D. Quass, J. McHugh, J. Widom, J. L. Wiener: The Lorel Query Language for Semistructure Data, International Journal on Digital Libraries 1(1): 68-88, 1997</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context> deep MIX object tree. There are also other languages that have been proposed for querying semi-structured or unstructured data organized as RTLs and LGs, for example, Lorel and XML-QL. However Lorel [1] does not provide restructuring operations which are needed in our transformation tasks. XML-QL [10] is designed for querying XML, and has been developed based on UnQL and Strudel [11]. Although a fir</context></contexts></citation><citation id="28709"><authors>C Bornhövd,A P</authors><title>Buchmann: A Prototype for Metadatabased Integration of Internet Sources</title><year>1999</year><pubAddress>CAiSE’99, Heidelberg, Germany</pubAddress><raw>C. Bornhövd, A. P. Buchmann: A Prototype for Metadatabased Integration of Internet Sources, CAiSE’99, Heidelberg, Germany, 1999</raw><contexts><context>zation possessing the data warehouse. Web data sources are available via the Internet. We represent Web data using a special data model called MIX (Metadata based Integration model for data X-change) [2, 6, 8]. MIX is a self-describing data model in the sense Time Dimension Key Day Month Year Shipping Fact Table Book Shop Fact Table Time-key Customer-Key Book-key List-price Sold-price Units-sold Dollars-so</context></contexts></citation><citation id="28710"><authors>P Buneman,S Davidson,G Hillebrand,D</authors><title>Suciu: AQuery Language and Optimization Techniques for Unstructured Data,SIGMOD’96</title><year>1996</year><pubAddress>Montreal, Canada</pubAddress><raw>P. Buneman, S. Davidson, G. Hillebrand, D. Suciu: AQuery Language and Optimization Techniques for Unstructured Data,SIGMOD’96, Montreal, Canada, 1996</raw><contexts><context> be changed, i.e., is application independent. Our transformation rule definition file can be written using a language for querying semi-structured or unstructured data. In our prototype, we use UnQL [3, 4] as the rule definition language. The reasons are: first, that language is designed for querying semi-structured and unstructured data organized as Rooted Labeled Trees (RLTs) or Labeled Graphs (LGs) </context><context>oinkey Discount Fact Table tuple ... tuple ... Time-key BookBookStore- SoldPrice Discount keykey Figure 7: RLT representation of data warehouse tables Our mapping rule definitions are written in UnQL [3, 4]. UnQL consists of tree constructors, function definitions and query definitions: ¯ tree constructors ��, �l :t�, Ø � Ø , �Ð � Ø � ���� ÐÒ � ØÒ� ¯ functions defined by structural recursion: let sfun �</context><context>ive traversal on an object tree and the restructuring of its subtrees. In order to make explicit the exact meaning, i.e., the specified processing of the mapping rules, we use a calculus called UnCAL [3, 4], which is UnQL’s internal algebra in the sense of lambda calculus (a formalism with variables and functions) rather than in the sense of relational calculus (a logic with variables and quantifiers). </context></contexts></citation><citation id="28711"><authors>P Buneman,M Fernandez,D</authors><title>Suciu: UnQL: a Query Languag and Algebra for Semistructured</title><venue>Data Based on Structural Recursion, VLDB Journal</venue><venType>JOURNAL</venType><year>2000</year><pages>76--110</pages><volume>9</volume><raw>P. Buneman, M. Fernandez, D. Suciu: UnQL: a Query Languag and Algebra for Semistructured Data Based on Structural Recursion, VLDB Journal 9(1): 76-110, 2000</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context> be changed, i.e., is application independent. Our transformation rule definition file can be written using a language for querying semi-structured or unstructured data. In our prototype, we use UnQL [3, 4] as the rule definition language. The reasons are: first, that language is designed for querying semi-structured and unstructured data organized as Rooted Labeled Trees (RLTs) or Labeled Graphs (LGs) </context><context>oinkey Discount Fact Table tuple ... tuple ... Time-key BookBookStore- SoldPrice Discount keykey Figure 7: RLT representation of data warehouse tables Our mapping rule definitions are written in UnQL [3, 4]. UnQL consists of tree constructors, function definitions and query definitions: ¯ tree constructors ��, �l :t�, Ø � Ø , �Ð � Ø � ���� ÐÒ � ØÒ� ¯ functions defined by structural recursion: let sfun �</context><context>s recursive traverse and ensures that the recursion always terminates. Therefore, the above mapping definitions can be written in the following form using structural recursion following UnQL’s syntax [4]. We will use mapping definitions in the structural recursion form in later sections, because this form can help to understand the semantics of transformation rules, which will be discussed in Section</context><context>ive traversal on an object tree and the restructuring of its subtrees. In order to make explicit the exact meaning, i.e., the specified processing of the mapping rules, we use a calculus called UnCAL [3, 4], which is UnQL’s internal algebra in the sense of lambda calculus (a formalism with variables and functions) rather than in the sense of relational calculus (a logic with variables and quantifiers). </context></contexts></citation><citation id="28712"><authors>C Beeri,T Milo</authors><title>Schemas for Integration and Translation</title><venue>of Structured and Semi-structured Data, ICDT’99</venue><venType>CONFERENCE</venType><year>1999</year><pubAddress>Jerusalem, Israel</pubAddress><raw>C. Beeri and T. Milo: Schemas for Integration and Translation of Structured and Semi-structured Data, ICDT’99, Jerusalem, Israel, 1999</raw><contexts><context>ces are explicitly described as mapping rules, based on which the transformation can be accomplished automatically via tree restructuring. Our approach is related to the work of Milo, Beeri and Zohar [5, 13]. They define common schema and data models for the source and target data. Using a rule-based method, they match components in the source schema with components in the target schema. The matching ide</context></contexts></citation><citation id="28713"><authors>C Bornhövd MIX</authors><title>A Representation Model for the Integration of Web-based Data</title><venType>TECHREPORT</venType><year>1999</year><tech>Technical Report, DVS99-1</tech><raw>C. Bornhövd: MIX – A Representation Model for the Integration of Web-based Data, Technical Report, DVS99-1, Department of Computer Science, Darmstadt University of Technology, 1999</raw><contexts><context>on the comparison of source- and target-schema and tree restructuring. First, Web data is integrated based on a common structural and semantic basis by using a selfdescribing object model, called MIX [6, 7]. We refer to this step as the Web data representation and integration phase, and the MIX model serves as a Web data representation model. Next is the transformation phase. In this step our source dat</context><context>zation possessing the data warehouse. Web data sources are available via the Internet. We represent Web data using a special data model called MIX (Metadata based Integration model for data X-change) [2, 6, 8]. MIX is a self-describing data model in the sense Time Dimension Key Day Month Year Shipping Fact Table Book Shop Fact Table Time-key Customer-Key Book-key List-price Sold-price Units-sold Dollars-so</context></contexts></citation><citation id="28714"><authors>C Bornhövd</authors><title>Semantic Metadata for the Integration of Web-based Data for Electronic</title><year>1999</year><pubAddress>Commerce, WECWIS’99, Santa Clara, USA</pubAddress><raw>C. Bornhövd: Semantic Metadata for the Integration of Web-based Data for Electronic Commerce, WECWIS’99, Santa Clara, USA, 1999</raw><contexts><context>on the comparison of source- and target-schema and tree restructuring. First, Web data is integrated based on a common structural and semantic basis by using a selfdescribing object model, called MIX [6, 7]. We refer to this step as the Web data representation and integration phase, and the MIX model serves as a Web data representation model. Next is the transformation phase. In this step our source dat</context></contexts></citation><citation id="28715"><authors>C Bornhövd</authors><title>Semantic Metadata for the Integration of Data Source from the Internet</title><venType>TECHREPORT</venType><year>2001</year><pubAddress>Germany</pubAddress><tech>Ph.D. thesis</tech><raw>C. Bornhövd: Semantic Metadata for the Integration of Data Source from the Internet, Ph.D. thesis, Darmstadt University of Technology, Germany, Jan. 2001</raw><contexts><context>zation possessing the data warehouse. Web data sources are available via the Internet. We represent Web data using a special data model called MIX (Metadata based Integration model for data X-change) [2, 6, 8]. MIX is a self-describing data model in the sense Time Dimension Key Day Month Year Shipping Fact Table Book Shop Fact Table Time-key Customer-Key Book-key List-price Sold-price Units-sold Dollars-so</context></contexts></citation><citation id="28716"><authors>S Cluet,C Delobel,J Simeón,K</authors><venue>Smaga: Your Mediators Need Data Conversion!, SIGMOD’98</venue><venType>CONFERENCE</venType><year>1998</year><pubAddress>Seattle, WA, USA</pubAddress><raw>S. Cluet, C. Delobel, J. Simeón and K. Smaga: Your Mediators Need Data Conversion!, SIGMOD’98, Seattle, WA, USA, 1998</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context> data from heterogeneous Web sources. When some attributes of the data warehouse acquire no data from the Web, we can use default values for these attributes. Another related system is the YAT system [9]. In their work, data from heterogeneous sources is integrated using an ODMG object view and materialized into an objectoriented database. A rule-based language called YATL serves as the conversion la</context></contexts></citation><citation id="28717"><authors>A Deutsch,M F Fernandez,D Florescu,A Y Levy,D</authors><title>Suciu: A Query Language for</title><venue>XML, WWW8 / Computer Networks</venue><venType>CONFERENCE</venType><year>1999</year><pages>31--11</pages><raw>A. Deutsch, M. F. Fernandez, D. Florescu, A. Y. Levy, D. Suciu: A Query Language for XML, WWW8 / Computer Networks 31(11-16): 1155-1169, 1999</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context>uctured or unstructured data organized as RTLs and LGs, for example, Lorel and XML-QL. However Lorel [1] does not provide restructuring operations which are needed in our transformation tasks. XML-QL [10] is designed for querying XML, and has been developed based on UnQL and Strudel [11]. Although a first working draft of the XML Query Algebra was just published by W3C’s XML Query Working Group [16], </context></contexts></citation><citation id="28718"><authors>M Fernandez,D Florescu,J Kang,A Levy,D</authors><venue>Suciu: STRUDEL : A Web Site Management System, SIGMOD’97</venue><venType>CONFERENCE</venType><year>1997</year><pubAddress>Tucson, USA</pubAddress><raw>M. Fernandez, D. Florescu, J. Kang, A. Levy, D. Suciu: STRUDEL : A Web Site Management System, SIGMOD’97, Tucson, USA, 1997</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context>L. However Lorel [1] does not provide restructuring operations which are needed in our transformation tasks. XML-QL [10] is designed for querying XML, and has been developed based on UnQL and Strudel [11]. Although a first working draft of the XML Query Algebra was just published by W3C’s XML Query Working Group [16], there is still no formal algebra for XML that can be used to formally describe the s</context></contexts></citation><citation id="28719"><authors>D Florescu,D Kossmann</authors><title>Storing and Querying XML Data Using a RDBMS, Bulletin on Data Engineering 22(3</title><year>2000</year><pages>27--34</pages><raw>D. Florescu, D. Kossmann: Storing and Querying XML Data Using a RDBMS, Bulletin on Data Engineering 22(3): 27-34, 2000</raw><contexts><context>ma and the translation from semi-structured queries over XML documents to SQL queries over the corresponding relational data. Florescu and Kossmann studied ad-hoc schemata for storing XML using RDBMS [12]. They represent XML data as ordered labeled directed graphs. Each XML element is represented by a node, element-subelement relationships are represented by edges, and values (e.g., strings) of an XML</context></contexts></citation><citation id="28720"><authors>T Milo,S Zohar</authors><title>Using Schema Matching to Simplify Heterogeneous Data Translation</title><year>1998</year><pubAddress>VLDB’98, New York City, USA</pubAddress><raw>T. Milo and S. Zohar, Using Schema Matching to Simplify Heterogeneous Data Translation, VLDB’98, New York City, USA, 1998</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context>ces are explicitly described as mapping rules, based on which the transformation can be accomplished automatically via tree restructuring. Our approach is related to the work of Milo, Beeri and Zohar [5, 13]. They define common schema and data models for the source and target data. Using a rule-based method, they match components in the source schema with components in the target schema. The matching ide</context><context> schema information is already provided as a part of MIX objects, we can use RLTs not only for the schema comparing process but the data mapping task as well. Second, the TranScm system introduced in [13] uses rules to match schemata. Each rule uses match and descendents functions to handle schema matching, and uses translation functions to handle data translation. In contrast to their descendents fun</context></contexts></citation><citation id="28721"><authors>A Schmidt,M Kersten,M Windhouwer,F</authors><venue>Waas: Efficient Relational Storage and Retrieval of XML Documents, WebDB’00</venue><venType>CONFERENCE</venType><year>2000</year><pubAddress>Dallas, USA</pubAddress><raw>A. Schmidt, M. Kersten, M. Windhouwer, F. Waas: Efficient Relational Storage and Retrieval of XML Documents, WebDB’00, Dallas, USA, 2000</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context>ional database can also be compared with our work. Schmidt et al. presents a data model and an execution model that allow for efficient storage and retrieval of XML documents in a relational database [14]. In their approach, XML documents are represented as syntax trees which are then decomposed into binary associations. Associations that provide semantically related information are stored together in</context><context>of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsare used to guide how to traverse the MIX object tree. While in [14] they store a lot of vertical path fragments in tables of a relational database. These path fragments represent routes from the root to internal nodes, from the root to CDATA and to character data. Sh</context></contexts></citation><citation id="28722"><authors>J Shanmugasundaram,K Tufte,G He,C Zhang,D DeWitt,J</authors><venue>Naughton: Relational Databases for Querying XML Documents: Limitations and Opportunities, VLDB’99</venue><venType>CONFERENCE</venType><year>1999</year><pubAddress>Edinburgh, Scotland</pubAddress><raw>J. Shanmugasundaram, K. Tufte, G. He, C. Zhang, D. DeWitt, J. Naughton: Relational Databases for Querying XML Documents: Limitations and Opportunities, VLDB’99, Edinburgh, Scotland, 1999</raw><contexts><context>ngs of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEEsquery systems for semistructured/unstructured data, such as [1, 4, 5, 9, 10, 11, 13, 14, 15]. RLTs serve as a view of MIX objects in our approach. Besides, a relational database table can be easily represented as a tree with all leaves having the same depth (fixed-depth tree). The online boo</context><context>ical path fragments in tables of a relational database. These path fragments represent routes from the root to internal nodes, from the root to CDATA and to character data. Shanmugasundaram et al. in [15] use a standard relational database system to evaluate powerful queries over XML documents. They process a DTD to generate a relational schema, then parse XML documents conforming to the DTD and load </context><context>is integrated. We focus on representing MIX objects and warehouse schema based on a common view (RTL) and identify similarities between schemata to specify and accomplish our transformation. While in [15] their main focus is on the transformation from a DTD to a relational schema and the translation from semi-structured queries over XML documents to SQL queries over the corresponding relational data. </context></contexts></citation><citation id="28723"><authors>Y Zhu,C Bornhövd,D Sautner,A P</authors><venue>Buchmann: Materializing Web Data for OLAP and DSS, WAIM’00</venue><venType>CONFERENCE</venType><year>2000</year><pubAddress>Shanghai, China</pubAddress><raw>Y. Zhu, C. Bornhövd, D. Sautner, A. P. Buchmann: Materializing Web Data for OLAP and DSS, WAIM’00, Shanghai, China, 2000</raw><contexts><context>ng them in a data warehouse for implementing OLAP on them, making business plans based on them, and mining historic data to deduct business rules will greatly benefit e-commerce. In our previous work [17, 18] we discussed a framework and an approach for warehousing Web data. This approach is already used to combine Web information and company data, and materializing them in a data warehouse. In [17] a lan</context><context> source A 2.2 System Architecture and the MIX Model Our system framework that provides a platform for integrating Web data and materializing it into a relational data warehouse has been introduced in [17]. The implementation of our framework is outlined in Figure 4. Components such as Transformation Processor, Federation Manager, Wrappers and Ontology Server are located at the organization possessing </context></contexts></citation><citation id="28724"><authors>Y Zhu</authors><title>A Framework for Warehousing the Web Contents, ICSC’99, Hong Kong</title><venue>Proceedings of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEE</venue><venType>CONFERENCE</venType><year>1999</year><raw>Y. Zhu: A Framework for Warehousing the Web Contents, ICSC’99, Hong Kong, 1999 Proceedings of the Third Int’l Workshop Advanced Issues of E-Commerce and Web-Based Information Systems (WECWIS’01) 1530-1354/01 $10.00 © 2001 IEEE</raw><contexts><context>ng them in a data warehouse for implementing OLAP on them, making business plans based on them, and mining historic data to deduct business rules will greatly benefit e-commerce. In our previous work [17, 18] we discussed a framework and an approach for warehousing Web data. This approach is already used to combine Web information and company data, and materializing them in a data warehouse. In [17] a lan</context></contexts></citation></citations><fileInfo><url>http://www.cs.kun.nl/is/Library/./Data/2001/Zhu/Data/2001-Zhu-Data.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>9557c8bf054bb4ecbcab5e657e306620216bbd81</sha1></checkSum></checkSums></fileInfo></document>