<document id="10.1.1.1.1570"><title src="SVM HeaderParse 0.1">Toward a Taxonomy of Time-Constrained Applications</title><abstract src="SVM HeaderParse 0.1">We are developing a taxonomy for classifying applications based on their time constraints. The taxonomy is based on three components that capture the key characteristics between different classes of applications: the process’s execution behavior, the timing constraints it requests, and the level of guarantee it is willing to accept from the system. The taxonomy is useful for two reasons: it provides a survey of the types of existing real-time scheduling applications, and it is a tool for understanding how to develop integrated schedulers that handle multiple classes of applications simultaneously. 1</abstract><keywords></keywords><authors></authors><citations src="ParsCit 1.0"><citation id="29559"><authors>A K Atlas,A Bestavros</authors><title>Statistical rate monotonic scheduling</title><venue>In Proceedings of the 19th IEEE Real-Time Systems Symposium (RTSS</venue><venType>CONFERENCE</venType><year>1998</year><publisher>IEEE</publisher><pubAddress>Madrid, Spain</pubAddress><raw>A. K. Atlas and A. Bestavros. Statistical rate monotonic scheduling. In Proceedings of the 19th IEEE Real-Time Systems Symposium (RTSS 1998), Madrid, Spain, Dec. 1998. IEEE.</raw><contexts><context>nd many SRT applications. AVERAGE The task is willing to except a reservation in which constraints are not met all the time, but are met on average. Most SRT systems provide these kinds of guarantees [17, 1, 17, 5, 3]. STRICT The task may only run if it is guaranteed to meet all timeliness constraints. Hard real-time systems are designed to provide this type of guarantee. Like the above, in many cases we expect cl</context></contexts></citation><citation id="29560"><authors>M Beck,H Böhme,M Dziadzka,U Kunitz,R Magnus,D Verworner</authors><title>Linux Kernel Internals. Addison–Wesley, 2nd edition</title><year>1998</year><raw>M. Beck, H. Böhme, M. Dziadzka, U. Kunitz, R. Magnus, and D. Verworner. Linux Kernel Internals. Addison–Wesley, 2nd edition, 1998.</raw><contexts><context> execute with whatever resources are available to them. A best-effort system is one that makes no guarantees to processes. The goal of a most BE systems, including generalpurpose time-sharing systems [13, 2], is fairly allocating resources and maintaining good response time.s2.2 Classes of Processes Each processing family has different timing constraints. More importantly, the way that applications wish </context></contexts></citation><citation id="29561"><authors>H Chu,K Nahrstedt</authors><title>A soft real time scheduling server in UNIX operating system</title><venue>In European Workshop on Interactive Distributed Multimedia Systems and Telecommunication Services</venue><venType>CONFERENCE</venType><year>1997</year><raw>H. Chu and K. Nahrstedt. A soft real time scheduling server in UNIX operating system. In European Workshop on Interactive Distributed Multimedia Systems and Telecommunication Services, Sept. 1997.</raw><contexts><context>nd many SRT applications. AVERAGE The task is willing to except a reservation in which constraints are not met all the time, but are met on average. Most SRT systems provide these kinds of guarantees [17, 1, 17, 5, 3]. STRICT The task may only run if it is guaranteed to meet all timeliness constraints. Hard real-time systems are designed to provide this type of guarantee. Like the above, in many cases we expect cl</context></contexts></citation><citation id="29562"><authors>H Chu,K Nahrstedt</authors><title>CPU service classes for multimedia applications</title><venue>In Proceedings of the 1999 IEEE International Conference on Multimedia Computing and Systems (ICMCS ’99</venue><venType>CONFERENCE</venType><year>1999</year><raw>H. Chu and K. Nahrstedt. CPU service classes for multimedia applications. In Proceedings of the 1999 IEEE International Conference on Multimedia Computing and Systems (ICMCS ’99), June 1999.</raw><contexts><context>riable period workloads, such as media in which the processing depends on the content of the data, the average case execution time of jobs may be known (also known as a variable processing time class [4]). Knowing a model of the variability, it is possible to provide some probabilistic guarantees [17, 5] RATE The task must make a fixed amount of progress during any fixed-length, but arbitrarily posit</context></contexts></citation><citation id="29563"><authors>M K Gardner,J W Liu</authors><title>Analyzing stochastic fixedpriority realtime systems</title><venue>In Proceedings of the Fifth International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Joint European Conferences on Theory and Practice of Software</venue><venType>CONFERENCE</venType><year>1999</year><pages>45--58</pages><publisher>SpringerVerlag</publisher><volume>1579</volume><raw>M. K. Gardner and J. W. Liu. Analyzing stochastic fixedpriority realtime systems. In Proceedings of the Fifth International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Joint European Conferences on Theory and Practice of Software, volume 1579 of Lecture Notes in Computer Science, pages 45–58. SpringerVerlag, Mar. 1999.</raw><contexts><context> the average case execution time of jobs may be known (also known as a variable processing time class [4]). Knowing a model of the variability, it is possible to provide some probabilistic guarantees [17, 5] RATE The task must make a fixed amount of progress during any fixed-length, but arbitrarily positioned, time interval [7] (also called the continuous class [9]). Alternately, an equivalent specificat</context><context>nd many SRT applications. AVERAGE The task is willing to except a reservation in which constraints are not met all the time, but are met on average. Most SRT systems provide these kinds of guarantees [17, 1, 17, 5, 3]. STRICT The task may only run if it is guaranteed to meet all timeliness constraints. Hard real-time systems are designed to provide this type of guarantee. Like the above, in many cases we expect cl</context></contexts></citation><citation id="29564"><authors>M Hamdaoui,P Ramanathan</authors><title>A dynamic priority assignment technique for streams with (m,k)-firm deadlines</title><venue>IEEE Transactions on Computers</venue><venType>JOURNAL</venType><year>1995</year><volume>44</volume><raw>M. Hamdaoui and P. Ramanathan. A dynamic priority assignment technique for streams with (m,k)-firm deadlines. IEEE Transactions on Computers, 44(12):1443–1451, Apr. 1995.</raw><contexts><context>interval [7] (also called the continuous class [9]). Alternately, an equivalent specification is expressed using an interval and a percentage of CPU [14]. FIRM The task must meet m out of k deadlines [6]. {DEADLINE} An imprecise constraint specification states a mandatory deadline constraint for each job, with optional deadlines associated with subprocesses that may be met in best effort fashion [11]</context></contexts></citation><citation id="29565"><authors>K Jeffay,D Bennett</authors><title>A rate-based execution abstraction for multimedia computing</title><venue>In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video</venue><venType>CONFERENCE</venType><year>1995</year><raw>K. Jeffay and D. Bennett. A rate-based execution abstraction for multimedia computing. In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, Apr. 1995.</raw><contexts><context> the variability, it is possible to provide some probabilistic guarantees [17, 5] RATE The task must make a fixed amount of progress during any fixed-length, but arbitrarily positioned, time interval [7] (also called the continuous class [9]). Alternately, an equivalent specification is expressed using an interval and a percentage of CPU [14]. FIRM The task must meet m out of k deadlines [6]. {DEADLI</context></contexts></citation><citation id="29566"><authors>E D Jensen,C D Locke,H Tokuda</authors><title>A time-driven scheduling model for real-time operating systems</title><venue>In Proceedings of the 6th IEEE Real-Time Systems Symposium (RTSS</venue><venType>CONFERENCE</venType><year>1985</year><raw>E. D. Jensen, C. D. Locke, and H. Tokuda. A time-driven scheduling model for real-time operating systems. In Proceedings of the 6th IEEE Real-Time Systems Symposium (RTSS 1985), Dec. 1985.</raw><contexts><context> supports one or more classes of soft real-time processes, usually attempting to maximize an aspect of system performance, such as maximizing the total utility of values attached to meeting deadlines [8]. Best effort processes have no timeliness constraints, and execute with whatever resources are available to them. A best-effort system is one that makes no guarantees to processes. The goal of a most</context><context>bove constraints may be paired with a utility function that associates a value with meeting the constraint. Utilities functions may consist of a fixed value or be represented as a timedependent curve [8, 12]. {any+u()} Any of the above parameters may be specified as of set of multiple constraints—these applications adapt to available resources by adjusting their constraints. These systems adapt allowing </context></contexts></citation><citation id="29567"><authors>M B Jones,D Ros¸u,M-C Ros¸u</authors><title>CPU reservations and time constraints: Efficient, predictable scheduling of independent activities</title><venue>In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP ’97</venue><venType>CONFERENCE</venType><year>1997</year><pages>pages</pages><raw>M. B. Jones, D. Ros¸u, and M.-C. Ros¸u. CPU reservations and time constraints: Efficient, predictable scheduling of independent activities. In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP ’97), pages 198–211, Oct. 1997.</raw><contexts><context>ovide some probabilistic guarantees [17, 5] RATE The task must make a fixed amount of progress during any fixed-length, but arbitrarily positioned, time interval [7] (also called the continuous class [9]). Alternately, an equivalent specification is expressed using an interval and a percentage of CPU [14]. FIRM The task must meet m out of k deadlines [6]. {DEADLINE} An imprecise constraint specificat</context></contexts></citation><citation id="29568"><authors>C L Liu,J W Layland</authors><title>Scheduling algorithms for multiprogramming in a hard-real-time environment</title><venue>Journal of the Association for Computing Machinery</venue><venType>JOURNAL</venType><year>1973</year><volume>20</volume><raw>C. L. Liu and J. W. Layland. Scheduling algorithms for multiprogramming in a hard-real-time environment. Journal of the Association for Computing Machinery, 20(1):46–61, Jan. 1973.</raw><contexts><context>he period and worst-case execution of any job of a task is known, task constraints may be used for hard guarantees. This constraint type is used to check for schedulability in the periodic task model [10]. DEADLINE+ACE For variable period workloads, such as media in which the processing depends on the content of the data, the average case execution time of jobs may be known (also known as a variable p</context></contexts></citation><citation id="29569"><authors>J W Liu,K Lin,W Shih,A C Yu,J Chung,W Zhao</authors><title>Algorithms for scheduling imprecise computations</title><venue>IEEE Computer</venue><venType>JOURNAL</venType><year>1991</year><volume>25</volume><raw>J. W. Liu, K. Lin, W. Shih, A. C. Yu, J. Chung, and W. Zhao. Algorithms for scheduling imprecise computations. IEEE Computer, 25(5):58–68, May 1991.</raw><contexts><context> [6]. {DEADLINE} An imprecise constraint specification states a mandatory deadline constraint for each job, with optional deadlines associated with subprocesses that may be met in best effort fashion [11]. any+u() Any of the above constraints may be paired with a utility function that associates a value with meeting the constraint. Utilities functions may consist of a fixed value or be represented as </context></contexts></citation><citation id="29570"><authors>C D Locke</authors><title>Best-Effort Decision Making for Real-Time Scheduling</title><venType>TECHREPORT</venType><year>1986</year><tech>PhD thesis</tech><raw>C. D. Locke. Best-Effort Decision Making for Real-Time Scheduling. PhD thesis, Carnegie-Mellon University, May 1986.</raw><contexts><context>bove constraints may be paired with a utility function that associates a value with meeting the constraint. Utilities functions may consist of a fixed value or be represented as a timedependent curve [8, 12]. {any+u()} Any of the above parameters may be specified as of set of multiple constraints—these applications adapt to available resources by adjusting their constraints. These systems adapt allowing </context></contexts></citation><citation id="29571"><authors>M K McKusick,K Bostic,M J Karels,J S Quarterman</authors><title>The Design and Implementation of the 4.4 BSD Operating System</title><year>1996</year><publisher>Addison–Wesley</publisher><raw>M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman. The Design and Implementation of the 4.4 BSD Operating System. Addison–Wesley, 1996.</raw><contexts><context> execute with whatever resources are available to them. A best-effort system is one that makes no guarantees to processes. The goal of a most BE systems, including generalpurpose time-sharing systems [13, 2], is fairly allocating resources and maintaining good response time.s2.2 Classes of Processes Each processing family has different timing constraints. More importantly, the way that applications wish </context></contexts></citation><citation id="29572"><authors>C W Mercer,S Savage,H Tokuda</authors><title>Processor capacity reserves: Operating system support for multimedia applications</title><venue>In Proceedings of the 1994 IEEE International Conference on Multimedia Computing and Systems (ICMCS ’94</venue><venType>CONFERENCE</venType><year>1994</year><pages>90--99</pages><raw>C. W. Mercer, S. Savage, and H. Tokuda. Processor capacity reserves: Operating system support for multimedia applications. In Proceedings of the 1994 IEEE International Conference on Multimedia Computing and Systems (ICMCS ’94), pages 90–99, May 1994.</raw><contexts><context>any fixed-length, but arbitrarily positioned, time interval [7] (also called the continuous class [9]). Alternately, an equivalent specification is expressed using an interval and a percentage of CPU [14]. FIRM The task must meet m out of k deadlines [6]. {DEADLINE} An imprecise constraint specification states a mandatory deadline constraint for each job, with optional deadlines associated with subpro</context></contexts></citation><citation id="29573"><authors>R Rajkumar,C Lee,J Lehoczky,D Siewiorek</authors><title>A resource allocation model for QoS management</title><venue>In Proceedings of the 18th IEEE Real-Time Systems Symposium (RTSS</venue><venType>CONFERENCE</venType><year>1997</year><raw>R. Rajkumar, C. Lee, J. Lehoczky, and D. Siewiorek. A resource allocation model for QoS management. In Proceedings of the 18th IEEE Real-Time Systems Symposium (RTSS 1997), Dec. 1997.</raw><contexts><context>may be specified as of set of multiple constraints—these applications adapt to available resources by adjusting their constraints. These systems adapt allowing the system allowing dynamic QoS control [18, 15].sTable 3. Types of Processing Guarantees Type Description NONE The task is able to run without any guarantee. This is provided by best-effort systems, and many SRT real-time applications are willing </context></contexts></citation><citation id="29574"><authors>J Regehr</authors><title>Using Hierarchical Scheduling to Support Soft Real-Time Applications on General-Purpose Operating Systems</title><venType>TECHREPORT</venType><year>2001</year><tech>PhD thesis</tech><raw>J. Regehr. Using Hierarchical Scheduling to Support Soft Real-Time Applications on General-Purpose Operating Systems. PhD thesis, University of Virginia, May 2001.</raw><contexts><context>similar algorithms, i.e. for treating different classes equivalently for scheduling purposes (often independently of the scheduling algorithm). The following theorem is adapted from the HLS framework [16]. Theorem 1 Any schedule that guarantees a rate x over interval y to a task of type a-RATE-b will also guarantee that a task of type a-DEADLINE+WCE-b with a worst-case execution time x and deadline y </context></contexts></citation><citation id="29575"><authors>T-S Tia,Z Deng,M Shankar,M Storch,J Sun,L Wu,J W Liu</authors><title>Probabilistic performance guarantee for realtime tasks with varying computation times</title><venue>In Proceedings of the Real-Time Technology and Applications Symposium (RTAS95</venue><venType>CONFERENCE</venType><year>1995</year><pages>164--173</pages><raw>T.-S. Tia, Z. Deng, M. Shankar, M. Storch, J. Sun, L. Wu, and J. W. Liu. Probabilistic performance guarantee for realtime tasks with varying computation times. In Proceedings of the Real-Time Technology and Applications Symposium (RTAS95), pages 164–173, May 1995.</raw><contexts><context> distracting enough to make execution not worthwhile without a minimum guarantee. Often, the requirements of a soft real-time task are characterized with average-case rather than worst-case estimates [17]; a guarantee may ensure that a task performs well on average, assuming it may accept degradation in the worst case. A soft real-time system is one that specifically supports one or more classes of so</context><context> the average case execution time of jobs may be known (also known as a variable processing time class [4]). Knowing a model of the variability, it is possible to provide some probabilistic guarantees [17, 5] RATE The task must make a fixed amount of progress during any fixed-length, but arbitrarily positioned, time interval [7] (also called the continuous class [9]). Alternately, an equivalent specificat</context><context>nd many SRT applications. AVERAGE The task is willing to except a reservation in which constraints are not met all the time, but are met on average. Most SRT systems provide these kinds of guarantees [17, 1, 17, 5, 3]. STRICT The task may only run if it is guaranteed to meet all timeliness constraints. Hard real-time systems are designed to provide this type of guarantee. Like the above, in many cases we expect cl</context></contexts></citation><citation id="29576"><authors>H Tokuda,T Kitayama</authors><title>Dynamic QoS control based on real-time threads</title><venue>In Proceedings of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video</venue><venType>CONFERENCE</venType><year>1993</year><pages>114--123</pages><raw>H. Tokuda and T. Kitayama. Dynamic QoS control based on real-time threads. In Proceedings of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, pages 114–123, 1993.</raw><contexts><context>may be specified as of set of multiple constraints—these applications adapt to available resources by adjusting their constraints. These systems adapt allowing the system allowing dynamic QoS control [18, 15].sTable 3. Types of Processing Guarantees Type Description NONE The task is able to run without any guarantee. This is provided by best-effort systems, and many SRT real-time applications are willing </context></contexts></citation></citations><fileInfo><url>http://www.cs.virginia.edu/~zaher/rtss-wip/07.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>b48fd523b2e76845aa9074d9f4af992b69587a99</sha1></checkSum></checkSums></fileInfo></document>