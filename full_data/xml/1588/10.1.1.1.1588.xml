<document id="10.1.1.1.1588"><title src="SVM HeaderParse 0.1">The BT-Tree: A Branched and Temporal Access Method</title><abstract src="SVM HeaderParse 0.1">Temporal databases assume a single line of time evolution. In other words, they support timeevolving data. However there are applications which require the support of temporal data with branched time evolution. With new branches created as time proceeds, branched and temporal data tends to increase in size rapidly, making the need for e cient indexing crucial. We propose a new (paginated) access method for branched and temporal data: the BT-tree. The BT-tree is both storage e cient and access e cient. We have implemented the BT-tree and performance results con rm these properties. 1</abstract><keywords></keywords><authors><author id="4416"><name src="SVM HeaderParse 0.1">Linan Jiang</name><address src="SVM HeaderParse 0.1">Boston, MA 02115</address><email src="SVM HeaderParse 0.1">flinan @ccs.neu.edu</email><order>1</order></author><author id="4417"><name src="SVM HeaderParse 0.1">Betty Salzberg</name><address src="SVM HeaderParse 0.1">Boston, MA 02115</address><email src="SVM HeaderParse 0.1">salzbergg@ccs.neu.edu</email><order>2</order></author></authors><citations src="ParsCit 1.0"><citation id="29832"><authors>Bruno Becker,Stephan Gschwind,Thomas Ohler,Bernhard Seeger,Peter Widmayer</authors><title>On optimal multiversion access structures</title><venue>In Porc. Symp. on Large Spatial Databases, in Lecture Notes in Computer Science</venue><venType>CONFERENCE</venType><year>1993</year><pages>123--141</pages><pubAddress>Singapore</pubAddress><volume>692</volume><raw>Bruno Becker, Stephan Gschwind, Thomas Ohler, Bernhard Seeger, and Peter Widmayer. On optimal multiversion access structures. In Porc. Symp. on Large Spatial Databases, in Lecture Notes in Computer Science, Vol. 692, pages 123{141, Singapore, 1993.</raw><contexts><context>The rest of the paper describes the BT-tree in detail. 1.1 Background and Previous Work Branched-and-temporal indexing is a relatively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing access to </context></contexts></citation><citation id="29833"><authors>James R Driscoll,Neil Sarnak,Daniel D Sleator,Robert E Tarjan</authors><title>Making data structures persistent</title><venue>Journal of Computer and System Sciences</venue><venType>JOURNAL</venType><year>1989</year><pages>86--124</pages><volume>38</volume><raw>James R. Driscoll, Neil Sarnak, Daniel D. Sleator, and Robert E. Tarjan. Making data structures persistent. Journal of Computer and System Sciences, 38, pages 86{124, 1989.</raw><contexts><context>sk pages. The paper [4] does not consider pagination and, although the structure is \branched,&amp;quot; only a current version can be split into branches. Old versions can not be 453 modi ed. Driscoll et al. [2] develop techniques for making linked data structures (e.g. binary search trees) fully persistent (allversions can be read and updated). Perhaps closest to our work is that of Lanka and Mays [5], whic</context><context>istent BT-tree structure problematic. We need to be able to decide whether or not one version is a descendent or ancestor of another. 2.1 Ancestor Determination Ancestor determination methods used in [2] and [5] for branched data use O(n) space. Their methods are not suitable for branched-and-temporal case where the number of timestamps is large (hence the corresponding total number of the versions i</context></contexts></citation><citation id="29834"><authors>M C Easton</authors><title>Key-sequence data sets on indelible storage</title><venue>IBM J. Res. Development</venue><venType>JOURNAL</venType><year>1986</year><volume>30</volume><raw>M. C. Easton. Key-sequence data sets on indelible storage. IBM J. Res. Development, 30(3):230{241, 1986.</raw><contexts><context>ee). The rest of the paper describes the BT-tree in detail. 1.1 Background and Previous Work Branched-and-temporal indexing is a relatively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing acces</context></contexts></citation><citation id="29835"><authors>Gad M Landau,Jeanette P Schmidt,Vassilis J Tsotras</authors><title>Historical queries along multiple lines of time evolution</title><venue>VLDB Journal</venue><venType>JOURNAL</venType><year>1995</year><pages>703--726</pages><volume>4</volume><raw>Gad M. Landau, Jeanette P. Schmidt, and Vassilis J. Tsotras. Historical queries along multiple lines of time evolution. VLDB Journal, 4, pages 703{726, 1995.</raw><contexts><context>ution, called branchedand-temporal data. Branched and temporal data arises in several important areas, such as software con guration control and engineering design. An example application is given in [4]. In our running example, consider the case where, at some time in May, the architect begins a new house design (say Paul's house). Instead of starting from scratch, the architect may choose to start </context><context>dexing crucial. A branched-andtemporal index method not only needs to support version slice queries, suchas\show me the design for Joe's house in March.&amp;quot;, but also needs to support historical queries [4], including horizontal queries and vertical queries, which arise because of branching. Atypical horizontal query is \Find all the house designs for a given branch, say \Joe's house&amp;quot;, or one of its des</context><context>ching. Other approaches to managing versioned data are less closely related. Work on \version management,&amp;quot; for example, in software engineering, does not consider e cient use of disk pages. The paper [4] does not consider pagination and, although the structure is \branched,&amp;quot; only a current version can be split into branches. Old versions can not be 453 modi ed. Driscoll et al. [2] develop techniques </context></contexts></citation><citation id="29836"><authors>Sitaram Lanka,Eric Mays</authors><title>Fully persistent B+trees</title><venue>In Proceedings of the ACM SIGMOD conference on Management of Data</venue><venType>CONFERENCE</venType><year>1991</year><pubAddress>Denver, CO</pubAddress><raw>Sitaram Lanka and Eric Mays. Fully persistent B+trees. In Proceedings of the ACM SIGMOD conference on Management of Data, Denver, CO, 1991.</raw><contexts><context>t al. [2] develop techniques for making linked data structures (e.g. binary search trees) fully persistent (allversions can be read and updated). Perhaps closest to our work is that of Lanka and Mays [5], which is based on ideas from [2]. Lanka and Mays' \fully persistent B+-tree&amp;quot; maintains multiple versions of B+-trees. The Fully persistent B+-tree is a branched-only access method. Branched-only dat</context><context>ing the total space usage greater than ours. Furthermore we provide an ancestor determination method which exploits the lesser amount of branching found in a branched-and-temporal database. The paper [5] maintains a full version tree for ancestor determination. This is too space-and-compute expensive for our case. 1.2 Organization of This Paper The rest of the paper is organized as follows. Section 2</context><context>T-tree structure problematic. We need to be able to decide whether or not one version is a descendent or ancestor of another. 2.1 Ancestor Determination Ancestor determination methods used in [2] and [5] for branched data use O(n) space. Their methods are not suitable for branched-and-temporal case where the number of timestamps is large (hence the corresponding total number of the versions is large)</context><context> the sparse page and its consolidating sibling are combined in a new page or, should that result in an over-full page, we then key-split the new consolidated page. This is similar to consolidation in [5]. Since more copies are made, page consolidation degrades space utilization in order to improve query performance. A page consolidation threshold of t \guarantees&amp;quot; that the space occupied by record va</context></contexts></citation><citation id="29837"><authors>David Lomet,Betty Salzberg</authors><title>The performance of a multiversion access method</title><venue>In Proceedings of the ACM SIGMOD conference on Management of Data</venue><venType>CONFERENCE</venType><year>1990</year><pages>354--363</pages><raw>David Lomet and Betty Salzberg. The performance of a multiversion access method. In Proceedings of the ACM SIGMOD conference on Management of Data, pages 354{363, 1990.</raw><contexts><context>est of the paper describes the BT-tree in detail. 1.1 Background and Previous Work Branched-and-temporal indexing is a relatively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing access to versi</context></contexts></citation><citation id="29838"><authors>Peter Muth,Patrick O'neil,Achim Pick,Gerhard Weikum</authors><title>Design, implementation, and performance on the LHAM log-structured history data access method</title><venue>In Proceedings of the 24th VLDB Conference</venue><venType>CONFERENCE</venType><year>1998</year><pages>452--463</pages><pubAddress>New York</pubAddress><raw>Peter Muth, Patrick O'neil, Achim Pick, and Gerhard Weikum. Design, implementation, and performance on the LHAM log-structured history data access method. In Proceedings of the 24th VLDB Conference, pages 452{463, New York, 1998.</raw><contexts><context>er describes the BT-tree in detail. 1.1 Background and Previous Work Branched-and-temporal indexing is a relatively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing access to versioned record se</context></contexts></citation><citation id="29839"><authors>Betty Salzberg,Vassilis J Tsotras</authors><title>A comparison of access methods for time evolving data. Computing Surveys</title><year>1999</year><raw>Betty Salzberg and Vassilis J. Tsotras. A comparison of access methods for time evolving data. Computing Surveys, March 1999.</raw><contexts><context>latively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing access to versioned record sets where the versioning is actually linear, i.e, no branching. Other approaches to managing versioned data </context></contexts></citation><citation id="29840"><authors>R Snodgrass,I Ahn</authors><title>Temporal databases</title><venue>IEEE computer, pages</venue><venType>JOURNAL</venType><year>1986</year><pages>35--42</pages><volume>19</volume><raw>R. Snodgrass and I. Ahn. Temporal databases. IEEE computer, pages Vol. 19, No. 9, pp 35{42, 1986.</raw><contexts><context>tions that require the support of time-evolving data. Temporal database systems model explicitly the temporal behavior of data, thus providing the ability to store and query temporal data e - ciently [9]. Conventional temporal databases assume a single line of time evolution. As an example, consider an architect's design of a new house (say Joe's house). The house design starts from scratch and evolv</context></contexts></citation><citation id="29841"><authors>J Vassilis</authors><title>Tsotras and Nickolas Kangelaris. The snapshot index: An I/O-optimal access method for timeslice queries</title><venue>Information Systems</venue><venType>JOURNAL</venType><year>1995</year><pages>237--260</pages><volume>20</volume><raw>Vassilis J. Tsotras and Nickolas Kangelaris. The snapshot index: An I/O-optimal access method for timeslice queries. Information Systems 20(3), pages 237{ 260, 1995.</raw><contexts><context>f the paper describes the BT-tree in detail. 1.1 Background and Previous Work Branched-and-temporal indexing is a relatively unexplored area. However, many access methods (for example, [3], [1], [6], [10] and [7]) have been proposed for temporal data. A survey and comparison of these access methods can be found in [8]. These methods have e ectively solved the problem of providing access to versioned r</context></contexts></citation></citations><fileInfo><url>http://www.vldb.org/conf/2000/P451.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>fd3c5c61f8f30a1ea37b78ab8afa6d6be0822f59</sha1></checkSum></checkSums></fileInfo></document>