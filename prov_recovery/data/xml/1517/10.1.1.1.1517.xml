<document id="10.1.1.1.1517"><clusterid>542</clusterid><title src="INFERENCE">The lattice-Boltzmann method for simulating gaseous phenomena</title><abstract src="SVM HeaderParse 0.1">Abstract—We present a physically-based, yet fast and simple method to simulate gaseous phenomena. In our approach, the incompressible Navier-Stokes (NS) equations governing fluid motion have been modeled in a novel way to achieve a realistic animation. We introduce the Lattice Boltzmann Model (LBM), which simulates the microscopic movement of fluid particles by linear and local rules on a grid of cells so that the macroscopic averaged properties obey the desired NS equations. The LBM is defined on a 2D or 3D discrete lattice, which is used to solve fluid animation based on different boundary conditions. The LBM simulation generates, in real-time, an accurate velocity field and can incorporate an optional temperature field to account for the buoyancy force of hot gas. Because of the linear and regular operations in each local cell of the LBM grid, we implement the computation in commodity texture hardware, further improving the simulation speed. Finally, textured splats are used to add small scale turbulent details, achieving highquality real-time rendering. Our method can also simulate the physically correct action of stationary or mobile obstacles on gaseous phenomena in real-time, while still maintaining highly plausible visual details. Index Terms—Lattice Boltzmann model, graphics hardware, GPU, textured splatting, gaseous phenomena modeling. 1</abstract><year src="INFERENCE">2004</year><venue src="INFERENCE">IEEE Transactions on Visualization and Computer Graphics</venue><venType src="INFERENCE">JOURNAL</venType><keywords></keywords><authors><author id="1408348"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Xiaoming Wei</name><order src="null">1</order></author><author id="1408349"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Student Member</name><order src="null">2</order></author><author id="1408350"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Wei Li</name><order src="null">3</order></author><author id="1408351"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Klaus Mueller</name><order src="null">4</order></author><author id="1408352"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Arie E. Kaufman</name><order src="null">5</order></author></authors><citations src="ParsCit 1.0"><citation id="28517"><clusterid>543</clusterid><authors>C Cercignani</authors><title>Mathematical Methods in Kinetic Theory</title><year>1990</year><publisher>Plenum</publisher><raw>C. Cercignani, Mathematical Methods in Kinetic Theory. Plenum, 1990.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>to a small numerical range, which makes the range scaling effective. Besides, the property of the LBM that the macroscopic dynamics is insensitive to the underlying details of the microscopic physics [1] relaxes the requirement on the accuracy of the computation. In the new generation of GPUs, such as ATI’s R300 and Nvidia’s NV30, floating-point computation is available throughout the fragment shader</context></contexts></citation><citation id="28518"><clusterid>544</clusterid><authors>J X Chen,N Da,V Lobo</authors><title>Toward Interactive-Rate Simulation of Fluids with Moving Using Navier-Stokes Equations</title><venue>Graphical Models and Image Processing</venue><venType>CONFERENCE</venType><year>1995</year><pages>10711--6</pages><volume>57</volume><raw>J.X. Chen, N. Da, and V. Lobo, “Toward Interactive-Rate Simulation of Fluids with Moving Using Navier-Stokes Equations,” Graphical Models and Image Processing, vol. 57, no. 2, pp. 107116, Mar. 1995.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>quires a large amount of computation time and memory, especially in 3D. In 1991, Wejchert and Haumann [38] gave an analytic solution to the NS equations by using simple flow primitives. Chen and Lobo [2] solved a simplified NS equations in 2D using a finite difference approach. Later, Foster and Metaxas [14] presented a full 3D finite difference solution to simulate the turbulent rotational motion of</context></contexts></citation><citation id="28519"><clusterid>545</clusterid><authors>S Chen,G D Doolean</authors><title>Lattice Boltzmann Method for Fluid Flows</title><venue>Ann. Rev. Fluid Mechanics</venue><venType>JOURNAL</venType><year>1998</year><pages>329--364</pages><volume>30</volume><raw>S. Chen and G.D. Doolean, “Lattice Boltzmann Method for Fluid Flows,” Ann. Rev. Fluid Mechanics, vol. 30, pp. 329-364, 1998.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>particles that move along each bond of the lattice, following the motion of an average distribution fqi of microscopic particles. This gives rise to a model known as the Lattice Boltzmann model (LBM) [3]. In the densities fqi, the index qi describes the D-dimensional sublattice defined by the permutations of ( 1; ...; 1; 0; ...0), where q is the number of nonzero components and i counts the sublattic</context><context>The update of the LBM system is decided by the collision operator qi. It is critical to select qi in such a way that the mass and momentum are conserved locally. Based on the work of Chen and Doolean [3], we assume that, for each individual packet distribution fqi at each cell, there is always a local equilibrium packet distribution f eq qi . Its value only depends on the conserved quantities and u a</context><context>ore quickly due to the buoyancy effect. The D3Q19 model used in our work is an isothermal model and it can’t describe the energy transfer due to difference in temperature. There are many thermal LBMs [3] in the Hydrodynamics field. However, most of them suffer from instability problems. To describe the effect of the buoyancy force, the evolution of temperature must also be modeled. The change of the </context></contexts></citation><citation id="28520"><clusterid>546</clusterid><authors>N Chiba,K Muraoka,H Takahashi,M Miura</authors><title>TwoDimensional Visual Simulation of Flames</title><venue>Smoke and the Spread of Fire,” J. Visualization and Computer Animation</venue><venType>JOURNAL</venType><year>1994</year><pages>37--53</pages><volume>5</volume><raw>N. Chiba, K. Muraoka, H. Takahashi, and M. Miura, “TwoDimensional Visual Simulation of Flames, Smoke and the Spread of Fire,” J. Visualization and Computer Animation, vol. 5, pp. 37-53, 1994.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>the temperature of the smoke in the air can be characterized as a combination of the convection and diffusion of heat in neighboring cells. To achieve fast speed, we use a linear equation, similar to [4], instead of an accurate differential equation, to approximate the change of temperature for the display primitives. Our model is governed by the following heat formula: TkðtÞ  Tkðt 1Þþ X GðdkjÞTjðt </context></contexts></citation><citation id="28521"><clusterid>547</clusterid><authors>N Chiba,S Sanakanishi,K Yokoyama,I Ootawara</authors><title>Visual Simulation of Water Currents Using a Particle-Based Bahavioural Model</title><venue>J. Visualization and Computer Animation</venue><venType>JOURNAL</venType><year>1995</year><pages>15517--1</pages><volume>6</volume><raw>N. Chiba, S. Sanakanishi, K. Yokoyama, and I. Ootawara, “Visual Simulation of Water Currents Using a Particle-Based Bahavioural Model,” J. Visualization and Computer Animation, vol. 6, pp. 155171, 1995.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> the next section, we present a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clou</context></contexts></citation><citation id="28522"><clusterid>548</clusterid><authors>R A Crawfis,N Max</authors><title>Texture Splats for 3D Scalar and Vector Field Visualization</title><venue>Proc. IEEE Visualization</venue><venType>CONFERENCE</venType><year>1993</year><pages>91--98</pages><raw>R.A. Crawfis and N. Max, “Texture Splats for 3D Scalar and Vector Field Visualization,” Proc. IEEE Visualization, pp. 91-98, Oct. 1993.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>into the LBM a number of physically accurate effects, such as the buoyancy effect of hot gases, additional realism can be provided. Our framework makes efficient use of the concept of textured splats [6], which are associated with the macroscopic particles to represent the gaseous phenomena. The textured splats form the observable “display particles,” such as the smoke particles or dust particles, wh</context><context>transformed to give periodic and chaotic vector fields that can be combined with the global motions. Another approach is to take advantage of commodity texture mapping hardware, using textured splats [6] as the rendering primitive. King et al. [20] first used this technique to achieve fluid animation based on simple and local dynamics. A drawback of their model is, however, that it lacks the interact</context></contexts></citation><citation id="28523"><clusterid>549</clusterid><authors>M Desbrun,M Gascue</authors><title>Smoothed Particles: A New Paradigm for Animating Highly Deformable Bodies</title><venue>Proc. Eurographics Workshop Animation and Simulation</venue><venType>CONFERENCE</venType><year>1996</year><pages>61--76</pages><raw>M. Desbrun and M. Gascue, “Smoothed Particles: A New Paradigm for Animating Highly Deformable Bodies,” Proc. Eurographics Workshop Animation and Simulation, pp. 61-76, 1996.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>next section, we present a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, s</context><context>e the interaction of particles due to the thermal energy. Terzopoulos et al. [34] implemented a similar approach. Particles and springs are utilized to render a series of blobbies. Desbrun and Gascue [7], [8] developed a paradigm extended from the Smoothed Particle Hydrodynamics approach used by physicists for cosmological fluid simulation. This technique defines a type of particle system which uses </context></contexts></citation><citation id="28524"><clusterid>550</clusterid><authors>M Desbrun,M-P Gascue</authors><title>Animating Soft Substances with Implicit Surfaces</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1995</year><pages>287--290</pages><raw>M. Desbrun and M.-P. Gascue, “Animating Soft Substances with Implicit Surfaces,” Proc. SIGGRAPH, pp. 287-290, Aug. 1995.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> interaction of particles due to the thermal energy. Terzopoulos et al. [34] implemented a similar approach. Particles and springs are utilized to render a series of blobbies. Desbrun and Gascue [7], [8] developed a paradigm extended from the Smoothed Particle Hydrodynamics approach used by physicists for cosmological fluid simulation. This technique defines a type of particle system which uses smoot</context></contexts></citation><citation id="28525"><clusterid>551</clusterid><authors>Y Dobashi,K Kaneda,H Yamashita,T Okita,T Nishita,“A Simple</authors><title>Efficient Method for Realistic Animation of Clouds</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>2000</year><pages>121--128</pages><raw>Y. Dobashi, K. Kaneda, H. Yamashita, T. Okita, and T. Nishita, “A Simple, Efficient Method for Realistic Animation of Clouds,” Proc. SIGGRAPH, pp. 121-128, Aug. 2000.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>linear and local rules, it is proven that the global behavior is the same as the one achieved by directly solving the heavy NS equations, which is the common approach in graphics [19]. Dobashi et al. [9] implemented a realistic animation of clouds based on a cellular automata model. Our work is fundamentally different from theirs. Dobashi et al.’s model can only be used to model clouds. In contrast, </context></contexts></citation><citation id="28526"><clusterid>552</clusterid><authors>G D Doolen</authors><title>Lattice Gas Methods for Partial Differential Equations</title><year>1990</year><publisher>Addison-Wesley</publisher><raw>G.D. Doolen, Lattice Gas Methods for Partial Differential Equations. Addison-Wesley, 1990.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>et the continuum macroscopic equations of fluid dynamics in two and three dimensions. The class of cellular automata used for the simulation of fluid dynamics is called the Lattice Gas Automata (LGA) [10]. The main difference between the LGA and the traditional numerical approaches of the NS equations is that, in the LGA, the physical evolution rules are discrete, while, in the latter, the discretizat</context></contexts></citation><citation id="28527"><clusterid>553</clusterid><authors>D S Ebert,R E Parent</authors><title>Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-Buffer Techniques</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1990</year><pages>357--366</pages><volume>24</volume><raw>D.S. Ebert and R.E. Parent, “Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-Buffer Techniques,” Proc. SIGGRAPH, vol. 24, no. 4, pp. 357-366, 1990. 176 IEEE TRANSACTIONS ON VISUALIZATION AND COMPUTER GRAPHICS, VOL. 10, NO. 2, MARCH/APRIL 2004</raw><paperid>10.1.1.1.1517</paperid><contexts><context> real-time rendering speed. Finally, we outline our implementation and describe several examples in Section 8. 2 PREVIOUS WORK A common approach to simulating gaseous phenomena is procedural modeling [11], [26], [30], where fluid behaviors are described by procedural functions. This method is fast and easy to program, but it is difficult to find the proper parameter settings that achieve realistic res</context></contexts></citation><citation id="28528"><clusterid>554</clusterid><authors>S J Farlow</authors><title>Partial Differential Equations for Scientists and Engineers</title><year>1982</year><publisher>Publications</publisher><pubAddress>New York: Dover</pubAddress><raw>S.J. Farlow, Partial Differential Equations for Scientists and Engineers. New York: Dover Publications, 1982.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>) shows the conservation of momentum. It describes the velocity changes in time, due to convection, spatial variations in pressure, viscous forces, and external forces. Many books and articles (e.g., [12], [16]) have been published on how to solve these equations numerically. The difficulty in solving the NS equations is due to their nonlinear terms. This complexity makes the solution of these equatio</context></contexts></citation><citation id="28529"><clusterid>0</clusterid><authors>R Fedkiw,J Stam,H Jensen</authors><venue>Visual Simulation of Smoke,” Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>2001</year><pages>129--136</pages><raw>R. Fedkiw, J. Stam, and H. Jensen, “Visual Simulation of Smoke,” Proc. SIGGRAPH, pp. 129-136, Aug. 2001.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>turbulent flows. It can also achieve real-time speed for a low-resolution grid. However, the numerical dissipation associated with the method causes the turbulence to decay too rapidly. Fedkiw et al. [13] further improved the result by introducing the concept of vortex confinement to the graphics field. The problem of numeric dissipation is addressed by feeding energy back into vortices through vortex</context></contexts></citation><citation id="28530"><clusterid>555</clusterid><authors>N Foster,D Metaxas</authors><title>Modeling the Motion of a Hot, Turbulent Gas</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1997</year><pages>181--188</pages><raw>N. Foster and D. Metaxas, “Modeling the Motion of a Hot, Turbulent Gas,” Proc. SIGGRAPH, pp. 181-188, Aug. 1997.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>] gave an analytic solution to the NS equations by using simple flow primitives. Chen and Lobo [2] solved a simplified NS equations in 2D using a finite difference approach. Later, Foster and Metaxas [14] presented a full 3D finite difference solution to simulate the turbulent rotational motion of gas. Because of the inherent instability of the finite difference method with a larger time step, the spe</context></contexts></citation><citation id="28531"><clusterid>556</clusterid><authors>U Frisch,B Hasslacher,Y Pomeau</authors><title>Lattice-Gas Automata for the Navier-Stokes Equations</title><venue>Physical Rev. Letters</venue><venType>JOURNAL</venType><year>1986</year><pages>1505--1508</pages><volume>56</volume><raw>U. Frisch, B. Hasslacher, and Y. Pomeau, “Lattice-Gas Automata for the Navier-Stokes Equations,” Physical Rev. Letters, vol. 56, no. 14, pp. 1505-1508, Apr. 1986.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> count) and momentum. The main problem with this model is that the gaseous behavior it modeled is anisotropic. A historically important lattice gas model is the FHP model, introduced by Frisch et al. [15] in 1986. It is a 2D hexagonal lattice used to ensure macroscopic isotropy. In this model, each cell has six nearest neighbors and, consequently, six possible velocity directions. Updating the grid in</context><context>he net momentum in the postcollision state remains zero. When multiple states are possible, a random selection is made. Fig. 1 represents the collision rules for the FHP model. It can be demonstrated [15] that, by observing the propagation and collision rules, we can simulate the following macroscopic equations based on the LGA: @u  @t ðgð Þu rÞu 1 rp þ 2 r u; ð3Þ where is the density and can be calc</context></contexts></citation><citation id="28532"><clusterid>557</clusterid><authors>N Gershenfeld</authors><title>The Nature of Mathematical Modeling</title><year>1999</year><publisher>Cambridge Univ. Press</publisher><raw>N. Gershenfeld, The Nature of Mathematical Modeling. Cambridge Univ. Press, 1999.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>s the conservation of momentum. It describes the velocity changes in time, due to convection, spatial variations in pressure, viscous forces, and external forces. Many books and articles (e.g., [12], [16]) have been published on how to solve these equations numerically. The difficulty in solving the NS equations is due to their nonlinear terms. This complexity makes the solution of these equations in </context></contexts></citation><citation id="28533"><clusterid>558</clusterid><authors>J Hardy,O de Pazzis,Y Pomeau</authors><title>Molecular Dynamics of a Classical Lattice Gas: Transport Properties and Time Correlation Functions</title><venue>Physics Rev. A</venue><venType>JOURNAL</venType><year>1976</year><pages>1949--1961</pages><volume>13</volume><raw>J. Hardy, O. de Pazzis, and Y. Pomeau, “Molecular Dynamics of a Classical Lattice Gas: Transport Properties and Time Correlation Functions,” Physics Rev. A, vol. 13, pp. 1949-1961, 1976.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> in the LGA, the physical evolution rules are discrete, while, in the latter, the discretization is performed on the level of the macroscopic flow equations. The first LGA, introduced by Hardy et al. [17], was called the HPP model, defined on a square lattice. In this model, microscopic particles of unit mass and unit speed move along the lattice links. Not more than one particle in a given direction </context></contexts></citation><citation id="28534"><clusterid>0</clusterid><authors>M Harris,G Coombe,T Scheuermann,A Lastra</authors><venue>Physically-Based Visual Simulation on Graphics Hardware,” Proc. SIGGRAPH/Eurographics Workshop Graphics Hardware</venue><venType>CONFERENCE</venType><year>2002</year><pages>1--10</pages><raw>M. Harris, G. Coombe, T. Scheuermann, and A. Lastra, “Physically-Based Visual Simulation on Graphics Hardware,” Proc. SIGGRAPH/Eurographics Workshop Graphics Hardware, pp. 1-10, Sept. 2002.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> Our work is fundamentally different from theirs. Dobashi et al.’s model can only be used to model clouds. In contrast, the LBM is a general method used to describe a variety of fluids. Harris et al. [18] implemented a coupled map lattice, a variation of cellular automata, on graphics hardware, which has similar motivation as this paper. To the best of our knowledge, we pioneered the introduction and </context></contexts></citation><citation id="28535"><clusterid>559</clusterid><authors>B D Kandhai</authors><title>Large Scale Lattice-Boltzmann Simulations</title><venType>TECHREPORT</venType><year>1999</year><tech>PhD thesis</tech><raw>B.D. Kandhai, “Large Scale Lattice-Boltzmann Simulations,” PhD thesis, Univ. of Amsterdam, Dec. 1999.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>egular grid based on linear and local rules, it is proven that the global behavior is the same as the one achieved by directly solving the heavy NS equations, which is the common approach in graphics [19]. Dobashi et al. [9] implemented a realistic animation of clouds based on a cellular automata model. Our work is fundamentally different from theirs. Dobashi et al.’s model can only be used to model c</context><context>ar motivation as this paper. To the best of our knowledge, we pioneered the introduction and use of the LBM to simulate gaseous phenomena in the graphics literature. 3 LATTICE BOLTZMANN MODEL The LBM [19], [25] is a lattice model similar to a cellular automata. It is defined on a 2D or 3D discrete grid, where the time and the state of each cell are also discrete. Fluid behavior can be understood as a </context><context>s to each packet distribution by (9); determine the packet distribution values for the incoming 4. Plug the packet distribution and equilibrium values links on the boundary nodes. Most methods (e.g., [19]), such into the kinetic equation (8); as the bounce-back and periodic boundary condition, 5. Propagate the packet distribution to all neighboring calculate these unknown packet distribution values ex</context></contexts></citation><citation id="28536"><clusterid>560</clusterid><authors>S A King,R A Crawfis,W Reid</authors><title>Fast Volume Rendering and Animation of Amorphous Phenomena,” Volume Graphics</title><year>2000</year><pages>229--242</pages><raw>S.A. King, R.A. Crawfis, and W. Reid, “Fast Volume Rendering and Animation of Amorphous Phenomena,” Volume Graphics, pp. 229-242, 2000.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>tor fields that can be combined with the global motions. Another approach is to take advantage of commodity texture mapping hardware, using textured splats [6] as the rendering primitive. King et al. [20] first used this technique to achieve fluid animation based on simple and local dynamics. A drawback of their model is, however, that it lacks the interaction of the fluid with environmental influence</context></contexts></citation><citation id="28537"><clusterid>561</clusterid><authors>W Li,X Wei,A Kaufman</authors><title>Implementing Lattice Boltzmann Computation on Graphics Hardware,” The Visual Computer</title><raw>W. Li, X. Wei, and A. Kaufman, “Implementing Lattice Boltzmann Computation on Graphics Hardware,” The Visual Computer, to appear.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>ture value. 6 MAPPING LBM TO GRAPHICS HARDWARE We briefly review in this section the basic ideas of mapping LBM to graphics hardware, that is, a graphics processing unit (GPU). (For more details, see [21].) To compute the LBM equations on GPU, we divide the LBM grid and group the packet distributions fqi into arrays according to their velocity directions. All the packet distributions with the same vel</context></contexts></citation><citation id="28538"><clusterid>0</clusterid><authors>A Luciani,A Habibi,A Vapillon,Y Duroc</authors><venue>A Physical Model of Turbulent Fluids,” Proc Eurographics Workshop Animation and Simulation</venue><venType>CONFERENCE</venType><year>1995</year><pages>16--29</pages><raw>A. Luciani, A. Habibi, A. Vapillon, and Y. Duroc, “A Physical Model of Turbulent Fluids,” Proc Eurographics Workshop Animation and Simulation, pp. 16-29, 1995.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>section, we present a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, </context></contexts></citation><citation id="28539"><clusterid>562</clusterid><authors>R Mei,L Luo,W Shyy</authors><title>An Accurate Curved Boundary Treatment in the Lattice Boltzman Method</title><venue>J. Computational Physics</venue><venType>JOURNAL</venType><year>1999</year><pages>307--330</pages><volume>155</volume><raw>R. Mei, L. Luo, and W. Shyy, “An Accurate Curved Boundary Treatment in the Lattice Boltzman Method,” J. Computational Physics, vol. 155, pp. 307-330, 1999.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>as the boundary conditions become complicated, such as a fast moving boundary object or a complex geometric structure. In our work, we implemented the boundary conditions based on Mei et al.’s method [23] for curved boundaries. In their approach, the problem is solved in another way. Instead of directly setting the microscopic values, they calculate the macroscopic variables of density and velocity at</context></contexts></citation><citation id="28540"><clusterid>563</clusterid><authors>G Miller,A Pearce</authors><title>Globular Dynamics: A Connected System for Animating Viscous Fluids</title><venue>Computers and Graphics</venue><venType>JOURNAL</venType><year>1998</year><pages>305--309</pages><volume>13</volume><raw>G. Miller and A. Pearce, “Globular Dynamics: A Connected System for Animating Viscous Fluids,” Computers and Graphics, vol. 13, no. 3, pp. 305-309, 1998.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>n, we present a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, and wa</context></contexts></citation><citation id="28541"><clusterid>564</clusterid><authors>D Muders</authors><title>Three-Dimensional Parallel Lattice Boltzmann Hydrodynamics Simulations of Turbulent Flows in Interstellar Dark Clouds</title><venType>TECHREPORT</venType><year>1995</year><tech>PhD thesis</tech><raw>D. Muders, “Three-Dimensional Parallel Lattice Boltzmann Hydrodynamics Simulations of Turbulent Flows in Interstellar Dark Clouds,” PhD thesis, Univ. of Bonn, Aug. 1995.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>ivation as this paper. To the best of our knowledge, we pioneered the introduction and use of the LBM to simulate gaseous phenomena in the graphics literature. 3 LATTICE BOLTZMANN MODEL The LBM [19], [25] is a lattice model similar to a cellular automata. It is defined on a 2D or 3D discrete grid, where the time and the state of each cell are also discrete. Fluid behavior can be understood as a self-o</context><context>ig. 3. The D3Q19 lattice geometry.s168 IEEE TRANSACTIONS ON VISUALIZATION AND COMPUTER GRAPHICS, VOL. 10, NO. 2, MARCH/APRIL 2004 TABLE 1 Coefficients of the Three Sublattices in the D3Q19 Model work [25], the equilibrium packet distribution can be represented by a linear formula: f eq qi  ðAq þ Bqðeqi uÞþCqðeqi uÞ 2 þ DqðuÞ 2 Þ; ð9Þ where the coefficients Aq through Dq are dependent on the employed </context><context> ubf  uff: ð14Þ In this section, we show how to incorporate a temperature field to model the buoyancy force of hot gases. Other types of external forces can also be added based on the work of Muders [25]. The temperature of smoke or gas has a direct effect on the behavior of their motion. Hot smoke tends to rise more quickly due to the buoyancy effect. The D3Q19 model used in our work is an isotherma</context></contexts></citation><citation id="28542"><clusterid>565</clusterid><authors>K Perlin</authors><title>An Image Synthesizer</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1985</year><pages>287--296</pages><volume>19</volume><raw>K. Perlin, “An Image Synthesizer,” Proc. SIGGRAPH, vol. 19, no. 3, pp. 287-296, July 1985.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>time rendering speed. Finally, we outline our implementation and describe several examples in Section 8. 2 PREVIOUS WORK A common approach to simulating gaseous phenomena is procedural modeling [11], [26], [30], where fluid behaviors are described by procedural functions. This method is fast and easy to program, but it is difficult to find the proper parameter settings that achieve realistic results. </context></contexts></citation><citation id="28543"><clusterid>0</clusterid><authors>K Perlin,E M Hoffert</authors><venue>Hypertexture,” Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1989</year><pages>253--262</pages><volume>20</volume><raw>K. Perlin and E.M. Hoffert, “Hypertexture,” Proc. SIGGRAPH, vol. 20, no. 3, pp. 253-262, July 1989.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>imitives are rendered in a back-to-front order. As the user changes the viewpoint position, the splats are aligned so that they face the user at all times. Alternatively, one can use 3D hypertextures [27] which are sliced according to the viewpoint. The use of textured splats also allows the efficient modeling of shadows cast by the volumetric gaseous phenomena. First, all regular scene objects are re</context></contexts></citation><citation id="28544"><clusterid>566</clusterid><authors>W T Reeves</authors><title>Particle System—A Technique for Modeling a Class of Fuzzy Objects</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1983</year><pages>359--376</pages><volume>17</volume><raw>W.T. Reeves, “Particle System—A Technique for Modeling a Class of Fuzzy Objects,” Proc. SIGGRAPH, vol. 17, no. 3, pp. 359-376, July 1983.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, and water. Tonnesen [35] used a discrete model for the heat transfer equations to describe the interaction of particles due to </context></contexts></citation><citation id="28545"><clusterid>0</clusterid><authors>M Segal,C Korobkin,R van Widenfelt,J Foran,P Haeberli</authors><venue>Fast Shadows and Lighting Effects Using Texture Mapping,” Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1992</year><pages>249--252</pages><raw>M. Segal, C. Korobkin, R. van Widenfelt, J. Foran, and P. Haeberli, “Fast Shadows and Lighting Effects Using Texture Mapping,” Proc. SIGGRAPH, pp. 249-252, Aug. 1992.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>MANN METHOD FOR SIMULATING GASEOUS PHENOMENA 173 Fig. 11. A sequence of images showing smoke interacting with a green moving obstacle. the hard shadow image onto the polygons, via projective textures [29]. 8 IMPLEMENTATION AND RESULTS We use a finite volume to represent the gaseous phenomena. The objects in the virtual environment are defined by axis-aligned bounding planes. Different types of boundar</context></contexts></citation><citation id="28546"><clusterid>567</clusterid><authors>K Sims</authors><title>Particle Animation and Rendering Using Data Parallel Computation</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1990</year><pages>405--413</pages><volume>24</volume><raw>K. Sims, “Particle Animation and Rendering Using Data Parallel Computation,” Proc. SIGGRAPH, vol. 24, no. 4, pp. 405-413, Aug. 1990.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>endering speed. Finally, we outline our implementation and describe several examples in Section 8. 2 PREVIOUS WORK A common approach to simulating gaseous phenomena is procedural modeling [11], [26], [30], where fluid behaviors are described by procedural functions. This method is fast and easy to program, but it is difficult to find the proper parameter settings that achieve realistic results. The in</context></contexts></citation><citation id="28547"><clusterid>568</clusterid><authors>J Stam</authors><title>Stable Fluids</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1999</year><pages>121--128</pages><raw>J. Stam, “Stable Fluids,” Proc. SIGGRAPH, pp. 121-128, Aug. 1999.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>e solution to simulate the turbulent rotational motion of gas. Because of the inherent instability of the finite difference method with a larger time step, the speed of this approach is limited. Stam [31] devised a fluid solver using a semi-Lagrangian advection scheme and implicit solver for the NS equations. Each term of the equations is handled in turn, starting with external force, then advection, </context></contexts></citation><citation id="28548"><clusterid>569</clusterid><authors>J Stam,E Fiume</authors><title>Turbulent Wind Fields for Gaseous Phenomena</title><venue>Proc. SIGGRAPH</venue><venType>CONFERENCE</venType><year>1993</year><pages>369--376</pages><raw>J. Stam and E. Fiume, “Turbulent Wind Fields for Gaseous Phenomena,” Proc. SIGGRAPH, pp. 369-376, Aug. 1993.</raw><paperid>10.1.1.1.1517</paperid><contexts><context> an equally efficient way to add the small-scale turbulence details into the visual simulation and render these to the screen. One way to model the small-scale turbulence is through spectral analysis [32]. Turbulent motion is first defined in Fourier space and then it is transformed to give periodic and chaotic vector fields that can be combined with the global motions. Another approach is to take adv</context></contexts></citation><citation id="28549"><clusterid>0</clusterid><authors>D Stora,P O Agliati,M P Cani,F Neyret,J D Gascuel</authors><venue>Animating Lava Flows,” Proc. Graphics Interface</venue><venType>CONFERENCE</venType><year>1999</year><pages>203--210</pages><raw>D. Stora, P.O. Agliati, M.P. Cani, F. Neyret, and J.D. Gascuel, “Animating Lava Flows,” Proc. Graphics Interface, pp. 203-210, June 1999.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>present a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, and water. T</context><context>166 IEEE TRANSACTIONS ON VISUALIZATION AND COMPUTER GRAPHICS, VOL. 10, NO. 2, MARCH/APRIL 2004 uous functions such as mass, density, speed, pressure, or temperature over space and time. Stora et al. [33] also used smooth particles to simulate lava flow. Particles are coated with implicit surfaces to get the final rendering result. Particles in all of the above methods move and interact freely in spac</context></contexts></citation><citation id="28550"><clusterid>570</clusterid><authors>D Terzopoulos,J Platt,K Fleischer</authors><title>Heating and Melting Deformable Models (from Goop to Glop</title><venue>Proc. Graphics Interface</venue><venType>CONFERENCE</venType><year>1989</year><pages>219--226</pages><raw>D. Terzopoulos, J. Platt, and K. Fleischer, “Heating and Melting Deformable Models (from Goop to Glop),” Proc. Graphics Interface, pp. 219-226, June 1989.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>t a complete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, and water. Tonnese</context></contexts></citation><citation id="28551"><clusterid>571</clusterid><authors>D Tonnesen</authors><title>Modeling Liquids and Solids Using Thermal Particles</title><venue>Proc. Graphics Interface</venue><venType>CONFERENCE</venType><year>1991</year><pages>255--262</pages><raw>D. Tonnesen, “Modeling Liquids and Solids Using Thermal Particles,” Proc. Graphics Interface, pp. 255-262, 1991.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>mplete framework for the LBM-based fluid simulation and how its calculation is implemented based on the fast growing GPU technology. Physically-based particle models [5], [7], [22], [24], [33], [34], [35] have also been used to describe fluid behaviors. Particle systems were first introduced by Reeves [28] as a technique for modeling fuzzy objects, such as fire, clouds, smoke, and water. Tonnesen [35]</context></contexts></citation><citation id="28552"><clusterid>572</clusterid><authors>X Wei,W Li,A Kaufman</authors><title>Melting and Flowing of Viscous Volumes</title><venue>Proc. Computer Animation and Social Agents</venue><venType>CONFERENCE</venType><year>2003</year><pages>54--59</pages><raw>X. Wei, W. Li, and A. Kaufman, “Melting and Flowing of Viscous Volumes,” Proc. Computer Animation and Social Agents, pp. 54-59, May 2003.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>prove the fluid animation. We also plan to model the behaviors of objects in the flow, such as the leaves blowing in the wind. Besides gaseous phenomena, our model can also be used to simulate liquid [36], heat in a solid, and the like, and be extended to model fire [37]. ACKNOWLEDGMENTS This work is partially supported by US Office of Naval Research grant N000140110034, US National Science Foundation</context></contexts></citation><citation id="28553"><clusterid>573</clusterid><authors>X Wei,W Li,K Mueller,A Kaufman</authors><title>Simulating Fire with Texture Splats</title><venue>Proc. IEEE Visualization</venue><venType>CONFERENCE</venType><year>2002</year><pages>227--237</pages><raw>X. Wei, W. Li, K. Mueller, and A. Kaufman, “Simulating Fire with Texture Splats,” Proc. IEEE Visualization, pp. 227-237, Oct. 2002.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>bjects in the flow, such as the leaves blowing in the wind. Besides gaseous phenomena, our model can also be used to simulate liquid [36], heat in a solid, and the like, and be extended to model fire [37]. ACKNOWLEDGMENTS This work is partially supported by US Office of Naval Research grant N000140110034, US National Science Foundation (NSF) grants IIS-0097646 and CCR-0306438 and NSF CAREER grant ACI-</context></contexts></citation><citation id="28554"><clusterid>574</clusterid><authors>J Wejchert,D Haumann</authors><title>Animation Aerodynamics</title><venue>The Ohio State University</venue><venType>CONFERENCE</venType><year>1991</year><pages>pp.</pages><pubAddress>Ulm, Germany</pubAddress><volume>25</volume><raw>J. Wejchert and D. Haumann, “Animation Aerodynamics,” Proc. SIGGRAPH, vol. 25, no. 4, pp. 19-22, July 1991. Xiaoming Wei received the BSc degree from Beijing University of Aeronautics and Astronautics of China in 1995 and the MSc degree in computer science from Tsinghua University of China in 1998. She is a PhD candidate in the Computer Science Department at Stony Brook University (SBU), where she is also a research assistant in the SBU Center for Visual Computing (CVC). Her research interests include physicallybased modeling, natural phenomena modeling, and computer graphics. She is a student member of the IEEE. For more information see http://www.cs.sunysb.edu/~wxiaomin. Wei Li received the BE and ME degrees in 1992 and 1995, respectively, both in electrical engineering, from Xi’an Jiaotong University, China, and the master’s degree in computer science from Stony Brook University (SBU) in 2000. He is a PhD candidate in the Computer Science Department of the SBU. His current research interests are focused on volume visualization and graphics hardware. For more information see http://www.cs.sunysb.edu/~liwei. Klaus Mueller earned the BS degree in electrical engineering (University of Ulm, Germany, 1987), the MS degree in biomedical engineering (The Ohio State University, 1990), and the PhD degree in computer science (The Ohio State University 1998). He is currently an assistant professor in the Computer Science Department at Stony Brook University, where he also holds coappointments in the Biomedical Engineering and the Radiology Departments. His current research interests are computer graphics, visualization, augmented reality, and medical imaging. He is a recipient of a US National Science Foundation CAREER award (2000) and has served as a program cochair at various conferences, such as the Volume Graphics Workshop (2001, 2003) and the Symposium on Volume Visualization and Graphics (2002). Arie E. Kaufman received the BS degree (1969) in mathematics and physics from the Hebrew University of Jerusalem, the MS degree (1973) in computer science from the Weizmann Institute of Science, Rehovot, Israel, and the PhD degree (1977) in computer science from the Ben-Gurion University, Israel. He is the director of the Center for Visual Computing (CVC), a leading professor and chair of the Computer Science Department, and leading professor of radiology at Stony Brook University. He was the founding Editor-in-Chief of the IEEE Transaction on Visualization and Computer Graphics (TVCG), 1995-1998. He has been the cochair for multiple Eurographics/ Siggraph Graphics Hardware Workshops and Volume Graphics Workshops, the papers/program cochair for the ACM Volume Visualization Symposium and the IEEE Visualization Conferences, and the cofounder and a member of the steering committee of the IEEE Visualization Conference series. He has previously chaired and is currently a director of the IEEE Computer Society Technical Committee on Visualization and Computer Graphics. He is an IEEE fellow and the recipient of a 1995 IEEE Outstanding Contribution Award, the 1996 IEEE Computer Society’s Golden Core Member, 1998 ACM Service Award, and 1999 IEEE Computer Society’s Meritorious Service Award, and 2002 State of New York Entrepreneur Award. He has conducted research and consulted for more than 30 years specializing in volume visualization, graphics architectures, algorithms, and languages, virtual reality, user interfaces, and multimedia. For more information see http://www.cs. sunysb.edu/~ari.</raw><paperid>10.1.1.1.1517</paperid><contexts><context>y correct manner. Physically-based modeling is another broadly used method; however, it usually requires a large amount of computation time and memory, especially in 3D. In 1991, Wejchert and Haumann [38] gave an analytic solution to the NS equations by using simple flow primitives. Chen and Lobo [2] solved a simplified NS equations in 2D using a finite difference approach. Later, Foster and Metaxas [</context></contexts></citation></citations><fileInfo><crawldate>Nov 19, 2007</crawldate><url>http://www.cs.sunysb.edu/%7Emueller/papers/smokeTVCG04.pdf</url><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><checkSums><checkSum><fileType>pdf</fileType><sha1>472f652ab152a2bdf3e3c649321b128226243b5d</sha1></checkSum></checkSums></fileInfo></document>