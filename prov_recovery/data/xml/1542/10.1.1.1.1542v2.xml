<document id="10.1.1.1.1542"><clusterid>871</clusterid><title src="INFERENCE">Prototyping Proof Carrying Code</title><abstract src="SVM HeaderParse 0.1">Abstract We introduce a generic framework for proof carrying code, developed and mechanically verified in Isabelle/HOL. The framework defines and proves sound a verification condition generator with minimal assumptions on the underlying programming language, safety policy, and safety logic. We demonstrate its usability for prototyping proof carrying code systems by instantiating it to a simple assembly language with procedures and a safety policy for arithmetic overflow. 1</abstract><year src="INFERENCE">2004</year><venue src="INFERENCE">Exploring New Frontiers of Theoretical Informatics</venue><venType src="INFERENCE">CONFERENCE</venType><pages src="INFERENCE">333--347</pages><publisher src="INFERENCE">Kluwer</publisher><keywords></keywords><authors><author id="4313266"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Martin Wildmoser</name><affil src="SVM HeaderParse 0.2">Institut für Informatik, Technische Universität München</affil><email src="SVM HeaderParse 0.1">wildmosm@in.tum.de</email><order src="null">1</order></author><author id="4313267"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Tobias Nipkow</name><affil src="SVM HeaderParse 0.2">Institut für Informatik, Technische Universität München</affil><email src="SVM HeaderParse 0.1">nipkow@in.tum.de</email><order src="null">2</order></author><author id="4313268"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Gerwin Klein</name><affil src="SVM HeaderParse 0.2">National ICT Australia, Sydney</affil><email src="SVM HeaderParse 0.1">gerwin.klein@nicta.com.au</email><order src="null">3</order></author><author id="4313269"><clusterid>0</clusterid><name src="SVM HeaderParse 0.1">Sebastian Nanz</name><affil src="SVM HeaderParse 0.2">Yale University, Department of Computer Science</affil><email src="SVM HeaderParse 0.1">nanz@cs.yale.edu</email><order src="null">4</order></author></authors><citations src="ParsCit 1.0"><citation id="28893"><clusterid>872</clusterid><authors>A W Appel</authors><title>Foundational proof-carrying code</title><venue>In 16th Annual IEEE Symposium on Logic in Computer Science (LICS</venue><venType>CONFERENCE</venType><year>2001</year><pages>247--258</pages><volume>1</volume><raw>Appel, A. W. (2001). Foundational proof-carrying code. In 16th Annual IEEE Symposium on Logic in Computer Science (LICS ’01), pages 247–258.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28894"><clusterid>873</clusterid><authors>A W Appel,A P Felty</authors><title>A semantic model of types and machine instructions for proof-carrying code</title><venue>In 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’00</venue><venType>CONFERENCE</venType><year>2000</year><pages>243--253</pages><raw>Appel, A. W. and Felty, A. P. (2000). A semantic model of types and machine instructions for proof-carrying code. In 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’00), pages 243–253.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28895"><clusterid>874</clusterid><authors>D Aspinall,L Beringer,M Hofmann,H W Loidl</authors><title>A Resource-aware Program Logic for a JVM-like Language</title><venue>In Trends in Functional Programming</venue><venType>CONFERENCE</venType><year>2003</year><editors>editor: S. Gilmore, Edinburgh</editors><raw>Aspinall, D., Beringer, L., Hofmann, M., Loidl, H.W. (2003) A Resource-aware Program Logic for a JVM-like Language In Trends in Functional Programming, editor: S. Gilmore, Edinburgh</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28896"><clusterid>875</clusterid><authors>S Berghofer,T Nipkow</authors><title>Proof terms for simply typed higher order logic</title><venue>In Theorem Proving in Higher Order Logics, Springer LNCS</venue><venType>CONFERENCE</venType><year>2000</year><editors>vol. 1869, editors: J. Harrison, M. Aagaard</editors><raw>Berghofer, S. and Nipkow, T. (2000). Proof terms for simply typed higher order logic. In Theorem Proving in Higher Order Logics, Springer LNCS vol. 1869, editors: J. Harrison, M. Aagaard</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28897"><clusterid>876</clusterid><authors>Berghofer</authors><title>Program Extraction in simply-typed Higher Order Logic</title><venue>In Types for Proofs and Programs, International Workshop, (TYPES 2002</venue><venType>CONFERENCE</venType><year>2003</year><editors>LNCS, editors: H. Geuvers, F. Wiedijk</editors><publisher>Springer</publisher><raw>Berghofer (2003). Program Extraction in simply-typed Higher Order Logic. In Types for Proofs and Programs, International Workshop, (TYPES 2002), Springer LNCS, editors: H. Geuvers, F. Wiedijk</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28898"><clusterid>877</clusterid><authors>C Colby,P Lee,G C Necula,F Blau,M Plesko,K Cline</authors><title>A certifying compiler for Java</title><venue>In Proc. ACM SIGPLAN conf. Programming Language Design and Implementation</venue><venType>CONFERENCE</venType><year>2000</year><pages>95--107</pages><raw>Colby, C., Lee, P., Necula, G. C., Blau, F., Plesko, M., and Cline, K. (2000). A certifying compiler for Java. In Proc. ACM SIGPLAN conf. Programming Language Design and Implementation, pages 95–107.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28899"><clusterid>878</clusterid><authors>N Hamid,Z Shao,V Trifonov,S Monnier,Z Ni</authors><title>A syntactic approach to foundational proof-carrying code</title><venue>In Proc. 17th IEEE Symp. Logic in Computer Science</venue><venType>CONFERENCE</venType><year>2002</year><pages>89--100</pages><raw>Hamid, N., Shao, Z., Trifonov, V., Monnier, S., and Ni, Z. (2002). A syntactic approach to foundational proof-carrying code. In Proc. 17th IEEE Symp. Logic in Computer Science, pages 89–100.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28900"><clusterid>879</clusterid><authors>G Klein</authors><title>Verified Java Bytecode Verification</title><venType>TECHREPORT</venType><year>2003</year><tech>PhD thesis</tech><raw>Klein, G. (2003). Verified Java Bytecode Verification. PhD thesis, Institut für Informatik, Technische Universität München.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28901"><clusterid>880</clusterid><authors>C League,Z Shao,V Trifonov</authors><title>Precision in practice: A type-preserving Java compiler</title><venType>TECHREPORT</venType><year>2002</year><tech>Technical Report YALEU/DCS/TR-1223</tech><raw>League, C., Shao, Z., and Trifonov, V. (2002). Precision in practice: A type-preserving Java compiler. Technical Report YALEU/DCS/TR-1223, Department of Computer Science, Yale University.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28902"><clusterid>881</clusterid><authors>G Morrisett,D Walker,K Crary,N Glew</authors><title>From system F to typed assembly language</title><venue>In Proc. 25th ACM Symp. Principles of Programming Languages</venue><venType>CONFERENCE</venType><year>1998</year><pages>85--97</pages><publisher>ACM Press</publisher><raw>Morrisett, G., Walker, D., Crary, K., and Glew, N. (1998). From system F to typed assembly language. In Proc. 25th ACM Symp. Principles of Programming Languages, pages 85–97. ACM Press.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28903"><clusterid>882</clusterid><authors>G C Necula</authors><title>Proof-carrying code</title><venue>In Proc. 24th ACM Symp. Principles of Programming Languages</venue><venType>CONFERENCE</venType><year>1997</year><pages>106--119</pages><publisher>ACM Press</publisher><raw>Necula, G. C. (1997). Proof-carrying code. In Proc. 24th ACM Symp. Principles of Programming Languages, pages 106–119. ACM Press.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28904"><clusterid>883</clusterid><authors>G C Necula</authors><title>Compiling with Proofs</title><venType>TECHREPORT</venType><year>1998</year><tech>PhD thesis</tech><raw>Necula, G. C. (1998). Compiling with Proofs. PhD thesis, Carnegie Mellon University.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28905"><clusterid>884</clusterid><authors>G C Necula,P Lee</authors><title>Proof generation in the touchstone theorem prover</title><venue>Automated Deduction — CADE-17, volume 1831 of Lect. Notes in Comp. Sci</venue><venType>CONFERENCE</venType><year>2000</year><pages>25--44</pages><editors>In McAllester, D., editor</editors><publisher>Springer-Verlag</publisher><raw>Necula, G. C. and Lee, P. (2000). Proof generation in the touchstone theorem prover. In McAllester, D., editor, Automated Deduction — CADE-17, volume 1831 of Lect. Notes in Comp. Sci., pages 25–44. Springer-Verlag.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28906"><clusterid>885</clusterid><authors>G C Necula,R R Schneck</authors><title>A gradual approach to a more trustworthy, yet scalable, proof-carrying code</title><venue>Proc.CADE-18, 18th International Conference on Automated Deduction</venue><venType>CONFERENCE</venType><year>2002</year><pages>47--62</pages><editors>In Voronkov, A., editor</editors><publisher>Springer-Verlag</publisher><pubAddress>Copenhagen, Denmark</pubAddress><volume>2392</volume><raw>Necula, G. C. and Schneck, R. R. (2002). A gradual approach to a more trustworthy, yet scalable, proof-carrying code. In Voronkov, A., editor, Proc.CADE-18, 18th International Conference on Automated Deduction, Copenhagen, Denmark, volume 2392 of Lect. Notes in Comp. Sci., pages 47–62. Springer-Verlag.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28907"><clusterid>886</clusterid><authors>G C Necula,R R Schneck</authors><title>A sound framework for untrustred verificationcondition generators</title><venue>In Proc. IEEE Symposium on Logic in Computer Science (LICS03</venue><venType>CONFERENCE</venType><year>2003</year><pages>248--260</pages><raw>Necula, G. C. and Schneck, R. R. (2003). A sound framework for untrustred verificationcondition generators. In Proc. IEEE Symposium on Logic in Computer Science (LICS03), pages 248–260.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28908"><clusterid>887</clusterid><authors>T Nipkow,L C Paulson,M Wenzel</authors><title>Isabelle/HOL – A Proof Assistant for Higher-Order Logic, volume 2283</title><venue>of Lect. Notes in Comp. Sci</venue><venType>CONFERENCE</venType><year>2002</year><publisher>Springer</publisher><raw>Nipkow, T., Paulson, L. C., and Wenzel, M. (2002). Isabelle/HOL – A Proof Assistant for Higher-Order Logic, volume 2283 of Lect. Notes in Comp. Sci. Springer.</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28909"><clusterid>888</clusterid><authors>G Klein,T Nipkow</authors><title>A Machine-Checked Model for a Java-Like Language</title><venue>Virtual Machine and Compiler Technical Report, National ICT</venue><venType>CONFERENCE</venType><year>2004</year><pubAddress>Australia, Sydney</pubAddress><raw>Klein, G. and Nipkow, T. (2004) A Machine-Checked Model for a Java-Like Language, Virtual Machine and Compiler Technical Report, National ICT Australia, Sydney</raw><paperid>10.1.1.1.1542</paperid></citation><citation id="28910"><clusterid>889</clusterid><authors>M Wildmoser,T Nipkow</authors><title>Certifying machine code safety: shallow versus deep embedding. TPHOLs 2004</title><year>2004</year><raw>Wildmoser, M. and Nipkow, T. (2004) Certifying machine code safety: shallow versus deep embedding. TPHOLs 2004</raw><paperid>10.1.1.1.1542</paperid></citation></citations><fileInfo><crawldate>Nov 19, 2007</crawldate><repID>rep1</repID><conversionTrace>PDFLib TET</conversionTrace><urls><url>http://www.doc.ic.ac.uk/~nanz/publications/./ppcc_tcs04.pdf</url></urls></fileInfo></document>